/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;


#if !SILVERLIGHT
[Serializable]
#endif
public partial class TSOpenSessionReq : TBase
{
  private string _username;
  private string _password;
  private Dictionary<string, string> _configuration;

  /// <summary>
  /// 
  /// <seealso cref="TSProtocolVersion"/>
  /// </summary>
  public TSProtocolVersion Client_protocol { get; set; }

  public string ZoneId { get; set; }

  public string Username
  {
    get
    {
      return _username;
    }
    set
    {
      __isset.username = true;
      this._username = value;
    }
  }

  public string Password
  {
    get
    {
      return _password;
    }
    set
    {
      __isset.password = true;
      this._password = value;
    }
  }

  public Dictionary<string, string> Configuration
  {
    get
    {
      return _configuration;
    }
    set
    {
      __isset.configuration = true;
      this._configuration = value;
    }
  }


  public Isset __isset;
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public struct Isset {
    public bool username;
    public bool password;
    public bool configuration;
  }

  public TSOpenSessionReq() {
    this.Client_protocol = TSProtocolVersion.IOTDB_SERVICE_PROTOCOL_V3;
  }

  public TSOpenSessionReq(TSProtocolVersion client_protocol, string zoneId) : this() {
    this.Client_protocol = client_protocol;
    this.ZoneId = zoneId;
  }

  public void Read (TProtocol iprot)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      bool isset_client_protocol = false;
      bool isset_zoneId = false;
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              Client_protocol = (TSProtocolVersion)iprot.ReadI32();
              isset_client_protocol = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              ZoneId = iprot.ReadString();
              isset_zoneId = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              Username = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.String) {
              Password = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.Map) {
              {
                Configuration = new Dictionary<string, string>();
                TMap _map38 = iprot.ReadMapBegin();
                for( int _i39 = 0; _i39 < _map38.Count; ++_i39)
                {
                  string _key40;
                  string _val41;
                  _key40 = iprot.ReadString();
                  _val41 = iprot.ReadString();
                  Configuration[_key40] = _val41;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
      if (!isset_client_protocol)
        throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Client_protocol not set");
      if (!isset_zoneId)
        throw new TProtocolException(TProtocolException.INVALID_DATA, "required field ZoneId not set");
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public void Write(TProtocol oprot) {
    oprot.IncrementRecursionDepth();
    try
    {
      TStruct struc = new TStruct("TSOpenSessionReq");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      field.Name = "client_protocol";
      field.Type = TType.I32;
      field.ID = 1;
      oprot.WriteFieldBegin(field);
      oprot.WriteI32((int)Client_protocol);
      oprot.WriteFieldEnd();
      if (ZoneId == null)
        throw new TProtocolException(TProtocolException.INVALID_DATA, "required field ZoneId not set");
      field.Name = "zoneId";
      field.Type = TType.String;
      field.ID = 2;
      oprot.WriteFieldBegin(field);
      oprot.WriteString(ZoneId);
      oprot.WriteFieldEnd();
      if (Username != null && __isset.username) {
        field.Name = "username";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Username);
        oprot.WriteFieldEnd();
      }
      if (Password != null && __isset.password) {
        field.Name = "password";
        field.Type = TType.String;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Password);
        oprot.WriteFieldEnd();
      }
      if (Configuration != null && __isset.configuration) {
        field.Name = "configuration";
        field.Type = TType.Map;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.String, TType.String, Configuration.Count));
          foreach (string _iter42 in Configuration.Keys)
          {
            oprot.WriteString(_iter42);
            oprot.WriteString(Configuration[_iter42]);
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override string ToString() {
    StringBuilder __sb = new StringBuilder("TSOpenSessionReq(");
    __sb.Append(", Client_protocol: ");
    __sb.Append(Client_protocol);
    __sb.Append(", ZoneId: ");
    __sb.Append(ZoneId);
    if (Username != null && __isset.username) {
      __sb.Append(", Username: ");
      __sb.Append(Username);
    }
    if (Password != null && __isset.password) {
      __sb.Append(", Password: ");
      __sb.Append(Password);
    }
    if (Configuration != null && __isset.configuration) {
      __sb.Append(", Configuration: ");
      __sb.Append(Configuration);
    }
    __sb.Append(")");
    return __sb.ToString();
  }

}

