/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

public partial class TSIService {
  public interface ISync {
    TSOpenSessionResp openSession(TSOpenSessionReq req);
    TSStatus closeSession(TSCloseSessionReq req);
    TSExecuteStatementResp executeStatement(TSExecuteStatementReq req);
    TSStatus executeBatchStatement(TSExecuteBatchStatementReq req);
    TSExecuteStatementResp executeQueryStatement(TSExecuteStatementReq req);
    TSExecuteStatementResp executeUpdateStatement(TSExecuteStatementReq req);
    TSFetchResultsResp fetchResults(TSFetchResultsReq req);
    TSFetchMetadataResp fetchMetadata(TSFetchMetadataReq req);
    TSStatus cancelOperation(TSCancelOperationReq req);
    TSStatus closeOperation(TSCloseOperationReq req);
    TSGetTimeZoneResp getTimeZone(long sessionId);
    TSStatus setTimeZone(TSSetTimeZoneReq req);
    ServerProperties getProperties();
    TSStatus setStorageGroup(long sessionId, string storageGroup);
    TSStatus createTimeseries(TSCreateTimeseriesReq req);
    TSStatus createMultiTimeseries(TSCreateMultiTimeseriesReq req);
    TSStatus deleteTimeseries(long sessionId, List<string> path);
    TSStatus deleteStorageGroups(long sessionId, List<string> storageGroup);
    TSStatus insertRecord(TSInsertRecordReq req);
    TSStatus insertStringRecord(TSInsertStringRecordReq req);
    TSStatus insertTablet(TSInsertTabletReq req);
    TSStatus insertTablets(TSInsertTabletsReq req);
    TSStatus insertRecords(TSInsertRecordsReq req);
    TSStatus insertRecordsOfOneDevice(TSInsertRecordsOfOneDeviceReq req);
    TSStatus insertStringRecords(TSInsertStringRecordsReq req);
    TSStatus testInsertTablet(TSInsertTabletReq req);
    TSStatus testInsertTablets(TSInsertTabletsReq req);
    TSStatus testInsertRecord(TSInsertRecordReq req);
    TSStatus testInsertStringRecord(TSInsertStringRecordReq req);
    TSStatus testInsertRecords(TSInsertRecordsReq req);
    TSStatus testInsertRecordsOfOneDevice(TSInsertRecordsOfOneDeviceReq req);
    TSStatus testInsertStringRecords(TSInsertStringRecordsReq req);
    TSStatus deleteData(TSDeleteDataReq req);
    TSExecuteStatementResp executeRawDataQuery(TSRawDataQueryReq req);
    long requestStatementId(long sessionId);
  }

  public interface Iface : ISync {
    #if SILVERLIGHT
    IAsyncResult Begin_openSession(AsyncCallback callback, object state, TSOpenSessionReq req);
    TSOpenSessionResp End_openSession(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_closeSession(AsyncCallback callback, object state, TSCloseSessionReq req);
    TSStatus End_closeSession(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_executeStatement(AsyncCallback callback, object state, TSExecuteStatementReq req);
    TSExecuteStatementResp End_executeStatement(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_executeBatchStatement(AsyncCallback callback, object state, TSExecuteBatchStatementReq req);
    TSStatus End_executeBatchStatement(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_executeQueryStatement(AsyncCallback callback, object state, TSExecuteStatementReq req);
    TSExecuteStatementResp End_executeQueryStatement(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_executeUpdateStatement(AsyncCallback callback, object state, TSExecuteStatementReq req);
    TSExecuteStatementResp End_executeUpdateStatement(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_fetchResults(AsyncCallback callback, object state, TSFetchResultsReq req);
    TSFetchResultsResp End_fetchResults(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_fetchMetadata(AsyncCallback callback, object state, TSFetchMetadataReq req);
    TSFetchMetadataResp End_fetchMetadata(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_cancelOperation(AsyncCallback callback, object state, TSCancelOperationReq req);
    TSStatus End_cancelOperation(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_closeOperation(AsyncCallback callback, object state, TSCloseOperationReq req);
    TSStatus End_closeOperation(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_getTimeZone(AsyncCallback callback, object state, long sessionId);
    TSGetTimeZoneResp End_getTimeZone(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_setTimeZone(AsyncCallback callback, object state, TSSetTimeZoneReq req);
    TSStatus End_setTimeZone(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_getProperties(AsyncCallback callback, object state);
    ServerProperties End_getProperties(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_setStorageGroup(AsyncCallback callback, object state, long sessionId, string storageGroup);
    TSStatus End_setStorageGroup(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_createTimeseries(AsyncCallback callback, object state, TSCreateTimeseriesReq req);
    TSStatus End_createTimeseries(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_createMultiTimeseries(AsyncCallback callback, object state, TSCreateMultiTimeseriesReq req);
    TSStatus End_createMultiTimeseries(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_deleteTimeseries(AsyncCallback callback, object state, long sessionId, List<string> path);
    TSStatus End_deleteTimeseries(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_deleteStorageGroups(AsyncCallback callback, object state, long sessionId, List<string> storageGroup);
    TSStatus End_deleteStorageGroups(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_insertRecord(AsyncCallback callback, object state, TSInsertRecordReq req);
    TSStatus End_insertRecord(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_insertStringRecord(AsyncCallback callback, object state, TSInsertStringRecordReq req);
    TSStatus End_insertStringRecord(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_insertTablet(AsyncCallback callback, object state, TSInsertTabletReq req);
    TSStatus End_insertTablet(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_insertTablets(AsyncCallback callback, object state, TSInsertTabletsReq req);
    TSStatus End_insertTablets(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_insertRecords(AsyncCallback callback, object state, TSInsertRecordsReq req);
    TSStatus End_insertRecords(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_insertRecordsOfOneDevice(AsyncCallback callback, object state, TSInsertRecordsOfOneDeviceReq req);
    TSStatus End_insertRecordsOfOneDevice(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_insertStringRecords(AsyncCallback callback, object state, TSInsertStringRecordsReq req);
    TSStatus End_insertStringRecords(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_testInsertTablet(AsyncCallback callback, object state, TSInsertTabletReq req);
    TSStatus End_testInsertTablet(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_testInsertTablets(AsyncCallback callback, object state, TSInsertTabletsReq req);
    TSStatus End_testInsertTablets(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_testInsertRecord(AsyncCallback callback, object state, TSInsertRecordReq req);
    TSStatus End_testInsertRecord(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_testInsertStringRecord(AsyncCallback callback, object state, TSInsertStringRecordReq req);
    TSStatus End_testInsertStringRecord(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_testInsertRecords(AsyncCallback callback, object state, TSInsertRecordsReq req);
    TSStatus End_testInsertRecords(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_testInsertRecordsOfOneDevice(AsyncCallback callback, object state, TSInsertRecordsOfOneDeviceReq req);
    TSStatus End_testInsertRecordsOfOneDevice(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_testInsertStringRecords(AsyncCallback callback, object state, TSInsertStringRecordsReq req);
    TSStatus End_testInsertStringRecords(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_deleteData(AsyncCallback callback, object state, TSDeleteDataReq req);
    TSStatus End_deleteData(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_executeRawDataQuery(AsyncCallback callback, object state, TSRawDataQueryReq req);
    TSExecuteStatementResp End_executeRawDataQuery(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_requestStatementId(AsyncCallback callback, object state, long sessionId);
    long End_requestStatementId(IAsyncResult asyncResult);
    #endif
  }

  public class Client : IDisposable, Iface {
    public Client(TProtocol prot) : this(prot, prot)
    {
    }

    public Client(TProtocol iprot, TProtocol oprot)
    {
      iprot_ = iprot;
      oprot_ = oprot;
    }

    protected TProtocol iprot_;
    protected TProtocol oprot_;
    protected int seqid_;

    public TProtocol InputProtocol
    {
      get { return iprot_; }
    }
    public TProtocol OutputProtocol
    {
      get { return oprot_; }
    }


    #region " IDisposable Support "
    private bool _IsDisposed;

    // IDisposable
    public void Dispose()
    {
      Dispose(true);
    }
    

    protected virtual void Dispose(bool disposing)
    {
      if (!_IsDisposed)
      {
        if (disposing)
        {
          if (iprot_ != null)
          {
            ((IDisposable)iprot_).Dispose();
          }
          if (oprot_ != null)
          {
            ((IDisposable)oprot_).Dispose();
          }
        }
      }
      _IsDisposed = true;
    }
    #endregion


    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_openSession(AsyncCallback callback, object state, TSOpenSessionReq req)
    {
      return send_openSession(callback, state, req);
    }

    public TSOpenSessionResp End_openSession(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_openSession();
    }

    #endif

    public TSOpenSessionResp openSession(TSOpenSessionReq req)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_openSession(null, null, req);
      return End_openSession(asyncResult);

      #else
      send_openSession(req);
      return recv_openSession();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_openSession(AsyncCallback callback, object state, TSOpenSessionReq req)
    {
      oprot_.WriteMessageBegin(new TMessage("openSession", TMessageType.Call, seqid_));
      openSession_args args = new openSession_args();
      args.Req = req;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_openSession(TSOpenSessionReq req)
    {
      oprot_.WriteMessageBegin(new TMessage("openSession", TMessageType.Call, seqid_));
      openSession_args args = new openSession_args();
      args.Req = req;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public TSOpenSessionResp recv_openSession()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      openSession_result result = new openSession_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "openSession failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_closeSession(AsyncCallback callback, object state, TSCloseSessionReq req)
    {
      return send_closeSession(callback, state, req);
    }

    public TSStatus End_closeSession(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_closeSession();
    }

    #endif

    public TSStatus closeSession(TSCloseSessionReq req)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_closeSession(null, null, req);
      return End_closeSession(asyncResult);

      #else
      send_closeSession(req);
      return recv_closeSession();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_closeSession(AsyncCallback callback, object state, TSCloseSessionReq req)
    {
      oprot_.WriteMessageBegin(new TMessage("closeSession", TMessageType.Call, seqid_));
      closeSession_args args = new closeSession_args();
      args.Req = req;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_closeSession(TSCloseSessionReq req)
    {
      oprot_.WriteMessageBegin(new TMessage("closeSession", TMessageType.Call, seqid_));
      closeSession_args args = new closeSession_args();
      args.Req = req;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public TSStatus recv_closeSession()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      closeSession_result result = new closeSession_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "closeSession failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_executeStatement(AsyncCallback callback, object state, TSExecuteStatementReq req)
    {
      return send_executeStatement(callback, state, req);
    }

    public TSExecuteStatementResp End_executeStatement(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_executeStatement();
    }

    #endif

    public TSExecuteStatementResp executeStatement(TSExecuteStatementReq req)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_executeStatement(null, null, req);
      return End_executeStatement(asyncResult);

      #else
      send_executeStatement(req);
      return recv_executeStatement();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_executeStatement(AsyncCallback callback, object state, TSExecuteStatementReq req)
    {
      oprot_.WriteMessageBegin(new TMessage("executeStatement", TMessageType.Call, seqid_));
      executeStatement_args args = new executeStatement_args();
      args.Req = req;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_executeStatement(TSExecuteStatementReq req)
    {
      oprot_.WriteMessageBegin(new TMessage("executeStatement", TMessageType.Call, seqid_));
      executeStatement_args args = new executeStatement_args();
      args.Req = req;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public TSExecuteStatementResp recv_executeStatement()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      executeStatement_result result = new executeStatement_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "executeStatement failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_executeBatchStatement(AsyncCallback callback, object state, TSExecuteBatchStatementReq req)
    {
      return send_executeBatchStatement(callback, state, req);
    }

    public TSStatus End_executeBatchStatement(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_executeBatchStatement();
    }

    #endif

    public TSStatus executeBatchStatement(TSExecuteBatchStatementReq req)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_executeBatchStatement(null, null, req);
      return End_executeBatchStatement(asyncResult);

      #else
      send_executeBatchStatement(req);
      return recv_executeBatchStatement();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_executeBatchStatement(AsyncCallback callback, object state, TSExecuteBatchStatementReq req)
    {
      oprot_.WriteMessageBegin(new TMessage("executeBatchStatement", TMessageType.Call, seqid_));
      executeBatchStatement_args args = new executeBatchStatement_args();
      args.Req = req;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_executeBatchStatement(TSExecuteBatchStatementReq req)
    {
      oprot_.WriteMessageBegin(new TMessage("executeBatchStatement", TMessageType.Call, seqid_));
      executeBatchStatement_args args = new executeBatchStatement_args();
      args.Req = req;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public TSStatus recv_executeBatchStatement()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      executeBatchStatement_result result = new executeBatchStatement_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "executeBatchStatement failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_executeQueryStatement(AsyncCallback callback, object state, TSExecuteStatementReq req)
    {
      return send_executeQueryStatement(callback, state, req);
    }

    public TSExecuteStatementResp End_executeQueryStatement(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_executeQueryStatement();
    }

    #endif

    public TSExecuteStatementResp executeQueryStatement(TSExecuteStatementReq req)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_executeQueryStatement(null, null, req);
      return End_executeQueryStatement(asyncResult);

      #else
      send_executeQueryStatement(req);
      return recv_executeQueryStatement();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_executeQueryStatement(AsyncCallback callback, object state, TSExecuteStatementReq req)
    {
      oprot_.WriteMessageBegin(new TMessage("executeQueryStatement", TMessageType.Call, seqid_));
      executeQueryStatement_args args = new executeQueryStatement_args();
      args.Req = req;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_executeQueryStatement(TSExecuteStatementReq req)
    {
      oprot_.WriteMessageBegin(new TMessage("executeQueryStatement", TMessageType.Call, seqid_));
      executeQueryStatement_args args = new executeQueryStatement_args();
      args.Req = req;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public TSExecuteStatementResp recv_executeQueryStatement()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      executeQueryStatement_result result = new executeQueryStatement_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "executeQueryStatement failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_executeUpdateStatement(AsyncCallback callback, object state, TSExecuteStatementReq req)
    {
      return send_executeUpdateStatement(callback, state, req);
    }

    public TSExecuteStatementResp End_executeUpdateStatement(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_executeUpdateStatement();
    }

    #endif

    public TSExecuteStatementResp executeUpdateStatement(TSExecuteStatementReq req)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_executeUpdateStatement(null, null, req);
      return End_executeUpdateStatement(asyncResult);

      #else
      send_executeUpdateStatement(req);
      return recv_executeUpdateStatement();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_executeUpdateStatement(AsyncCallback callback, object state, TSExecuteStatementReq req)
    {
      oprot_.WriteMessageBegin(new TMessage("executeUpdateStatement", TMessageType.Call, seqid_));
      executeUpdateStatement_args args = new executeUpdateStatement_args();
      args.Req = req;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_executeUpdateStatement(TSExecuteStatementReq req)
    {
      oprot_.WriteMessageBegin(new TMessage("executeUpdateStatement", TMessageType.Call, seqid_));
      executeUpdateStatement_args args = new executeUpdateStatement_args();
      args.Req = req;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public TSExecuteStatementResp recv_executeUpdateStatement()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      executeUpdateStatement_result result = new executeUpdateStatement_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "executeUpdateStatement failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_fetchResults(AsyncCallback callback, object state, TSFetchResultsReq req)
    {
      return send_fetchResults(callback, state, req);
    }

    public TSFetchResultsResp End_fetchResults(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_fetchResults();
    }

    #endif

    public TSFetchResultsResp fetchResults(TSFetchResultsReq req)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_fetchResults(null, null, req);
      return End_fetchResults(asyncResult);

      #else
      send_fetchResults(req);
      return recv_fetchResults();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_fetchResults(AsyncCallback callback, object state, TSFetchResultsReq req)
    {
      oprot_.WriteMessageBegin(new TMessage("fetchResults", TMessageType.Call, seqid_));
      fetchResults_args args = new fetchResults_args();
      args.Req = req;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_fetchResults(TSFetchResultsReq req)
    {
      oprot_.WriteMessageBegin(new TMessage("fetchResults", TMessageType.Call, seqid_));
      fetchResults_args args = new fetchResults_args();
      args.Req = req;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public TSFetchResultsResp recv_fetchResults()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      fetchResults_result result = new fetchResults_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "fetchResults failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_fetchMetadata(AsyncCallback callback, object state, TSFetchMetadataReq req)
    {
      return send_fetchMetadata(callback, state, req);
    }

    public TSFetchMetadataResp End_fetchMetadata(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_fetchMetadata();
    }

    #endif

    public TSFetchMetadataResp fetchMetadata(TSFetchMetadataReq req)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_fetchMetadata(null, null, req);
      return End_fetchMetadata(asyncResult);

      #else
      send_fetchMetadata(req);
      return recv_fetchMetadata();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_fetchMetadata(AsyncCallback callback, object state, TSFetchMetadataReq req)
    {
      oprot_.WriteMessageBegin(new TMessage("fetchMetadata", TMessageType.Call, seqid_));
      fetchMetadata_args args = new fetchMetadata_args();
      args.Req = req;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_fetchMetadata(TSFetchMetadataReq req)
    {
      oprot_.WriteMessageBegin(new TMessage("fetchMetadata", TMessageType.Call, seqid_));
      fetchMetadata_args args = new fetchMetadata_args();
      args.Req = req;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public TSFetchMetadataResp recv_fetchMetadata()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      fetchMetadata_result result = new fetchMetadata_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "fetchMetadata failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_cancelOperation(AsyncCallback callback, object state, TSCancelOperationReq req)
    {
      return send_cancelOperation(callback, state, req);
    }

    public TSStatus End_cancelOperation(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_cancelOperation();
    }

    #endif

    public TSStatus cancelOperation(TSCancelOperationReq req)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_cancelOperation(null, null, req);
      return End_cancelOperation(asyncResult);

      #else
      send_cancelOperation(req);
      return recv_cancelOperation();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_cancelOperation(AsyncCallback callback, object state, TSCancelOperationReq req)
    {
      oprot_.WriteMessageBegin(new TMessage("cancelOperation", TMessageType.Call, seqid_));
      cancelOperation_args args = new cancelOperation_args();
      args.Req = req;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_cancelOperation(TSCancelOperationReq req)
    {
      oprot_.WriteMessageBegin(new TMessage("cancelOperation", TMessageType.Call, seqid_));
      cancelOperation_args args = new cancelOperation_args();
      args.Req = req;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public TSStatus recv_cancelOperation()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      cancelOperation_result result = new cancelOperation_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "cancelOperation failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_closeOperation(AsyncCallback callback, object state, TSCloseOperationReq req)
    {
      return send_closeOperation(callback, state, req);
    }

    public TSStatus End_closeOperation(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_closeOperation();
    }

    #endif

    public TSStatus closeOperation(TSCloseOperationReq req)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_closeOperation(null, null, req);
      return End_closeOperation(asyncResult);

      #else
      send_closeOperation(req);
      return recv_closeOperation();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_closeOperation(AsyncCallback callback, object state, TSCloseOperationReq req)
    {
      oprot_.WriteMessageBegin(new TMessage("closeOperation", TMessageType.Call, seqid_));
      closeOperation_args args = new closeOperation_args();
      args.Req = req;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_closeOperation(TSCloseOperationReq req)
    {
      oprot_.WriteMessageBegin(new TMessage("closeOperation", TMessageType.Call, seqid_));
      closeOperation_args args = new closeOperation_args();
      args.Req = req;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public TSStatus recv_closeOperation()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      closeOperation_result result = new closeOperation_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "closeOperation failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_getTimeZone(AsyncCallback callback, object state, long sessionId)
    {
      return send_getTimeZone(callback, state, sessionId);
    }

    public TSGetTimeZoneResp End_getTimeZone(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getTimeZone();
    }

    #endif

    public TSGetTimeZoneResp getTimeZone(long sessionId)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_getTimeZone(null, null, sessionId);
      return End_getTimeZone(asyncResult);

      #else
      send_getTimeZone(sessionId);
      return recv_getTimeZone();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getTimeZone(AsyncCallback callback, object state, long sessionId)
    {
      oprot_.WriteMessageBegin(new TMessage("getTimeZone", TMessageType.Call, seqid_));
      getTimeZone_args args = new getTimeZone_args();
      args.SessionId = sessionId;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_getTimeZone(long sessionId)
    {
      oprot_.WriteMessageBegin(new TMessage("getTimeZone", TMessageType.Call, seqid_));
      getTimeZone_args args = new getTimeZone_args();
      args.SessionId = sessionId;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public TSGetTimeZoneResp recv_getTimeZone()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getTimeZone_result result = new getTimeZone_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getTimeZone failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_setTimeZone(AsyncCallback callback, object state, TSSetTimeZoneReq req)
    {
      return send_setTimeZone(callback, state, req);
    }

    public TSStatus End_setTimeZone(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_setTimeZone();
    }

    #endif

    public TSStatus setTimeZone(TSSetTimeZoneReq req)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_setTimeZone(null, null, req);
      return End_setTimeZone(asyncResult);

      #else
      send_setTimeZone(req);
      return recv_setTimeZone();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_setTimeZone(AsyncCallback callback, object state, TSSetTimeZoneReq req)
    {
      oprot_.WriteMessageBegin(new TMessage("setTimeZone", TMessageType.Call, seqid_));
      setTimeZone_args args = new setTimeZone_args();
      args.Req = req;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_setTimeZone(TSSetTimeZoneReq req)
    {
      oprot_.WriteMessageBegin(new TMessage("setTimeZone", TMessageType.Call, seqid_));
      setTimeZone_args args = new setTimeZone_args();
      args.Req = req;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public TSStatus recv_setTimeZone()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      setTimeZone_result result = new setTimeZone_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "setTimeZone failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_getProperties(AsyncCallback callback, object state)
    {
      return send_getProperties(callback, state);
    }

    public ServerProperties End_getProperties(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getProperties();
    }

    #endif

    public ServerProperties getProperties()
    {
      #if SILVERLIGHT
      var asyncResult = Begin_getProperties(null, null);
      return End_getProperties(asyncResult);

      #else
      send_getProperties();
      return recv_getProperties();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getProperties(AsyncCallback callback, object state)
    {
      oprot_.WriteMessageBegin(new TMessage("getProperties", TMessageType.Call, seqid_));
      getProperties_args args = new getProperties_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_getProperties()
    {
      oprot_.WriteMessageBegin(new TMessage("getProperties", TMessageType.Call, seqid_));
      getProperties_args args = new getProperties_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public ServerProperties recv_getProperties()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getProperties_result result = new getProperties_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getProperties failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_setStorageGroup(AsyncCallback callback, object state, long sessionId, string storageGroup)
    {
      return send_setStorageGroup(callback, state, sessionId, storageGroup);
    }

    public TSStatus End_setStorageGroup(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_setStorageGroup();
    }

    #endif

    public TSStatus setStorageGroup(long sessionId, string storageGroup)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_setStorageGroup(null, null, sessionId, storageGroup);
      return End_setStorageGroup(asyncResult);

      #else
      send_setStorageGroup(sessionId, storageGroup);
      return recv_setStorageGroup();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_setStorageGroup(AsyncCallback callback, object state, long sessionId, string storageGroup)
    {
      oprot_.WriteMessageBegin(new TMessage("setStorageGroup", TMessageType.Call, seqid_));
      setStorageGroup_args args = new setStorageGroup_args();
      args.SessionId = sessionId;
      args.StorageGroup = storageGroup;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_setStorageGroup(long sessionId, string storageGroup)
    {
      oprot_.WriteMessageBegin(new TMessage("setStorageGroup", TMessageType.Call, seqid_));
      setStorageGroup_args args = new setStorageGroup_args();
      args.SessionId = sessionId;
      args.StorageGroup = storageGroup;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public TSStatus recv_setStorageGroup()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      setStorageGroup_result result = new setStorageGroup_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "setStorageGroup failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_createTimeseries(AsyncCallback callback, object state, TSCreateTimeseriesReq req)
    {
      return send_createTimeseries(callback, state, req);
    }

    public TSStatus End_createTimeseries(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_createTimeseries();
    }

    #endif

    public TSStatus createTimeseries(TSCreateTimeseriesReq req)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_createTimeseries(null, null, req);
      return End_createTimeseries(asyncResult);

      #else
      send_createTimeseries(req);
      return recv_createTimeseries();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_createTimeseries(AsyncCallback callback, object state, TSCreateTimeseriesReq req)
    {
      oprot_.WriteMessageBegin(new TMessage("createTimeseries", TMessageType.Call, seqid_));
      createTimeseries_args args = new createTimeseries_args();
      args.Req = req;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_createTimeseries(TSCreateTimeseriesReq req)
    {
      oprot_.WriteMessageBegin(new TMessage("createTimeseries", TMessageType.Call, seqid_));
      createTimeseries_args args = new createTimeseries_args();
      args.Req = req;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public TSStatus recv_createTimeseries()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      createTimeseries_result result = new createTimeseries_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "createTimeseries failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_createMultiTimeseries(AsyncCallback callback, object state, TSCreateMultiTimeseriesReq req)
    {
      return send_createMultiTimeseries(callback, state, req);
    }

    public TSStatus End_createMultiTimeseries(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_createMultiTimeseries();
    }

    #endif

    public TSStatus createMultiTimeseries(TSCreateMultiTimeseriesReq req)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_createMultiTimeseries(null, null, req);
      return End_createMultiTimeseries(asyncResult);

      #else
      send_createMultiTimeseries(req);
      return recv_createMultiTimeseries();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_createMultiTimeseries(AsyncCallback callback, object state, TSCreateMultiTimeseriesReq req)
    {
      oprot_.WriteMessageBegin(new TMessage("createMultiTimeseries", TMessageType.Call, seqid_));
      createMultiTimeseries_args args = new createMultiTimeseries_args();
      args.Req = req;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_createMultiTimeseries(TSCreateMultiTimeseriesReq req)
    {
      oprot_.WriteMessageBegin(new TMessage("createMultiTimeseries", TMessageType.Call, seqid_));
      createMultiTimeseries_args args = new createMultiTimeseries_args();
      args.Req = req;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public TSStatus recv_createMultiTimeseries()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      createMultiTimeseries_result result = new createMultiTimeseries_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "createMultiTimeseries failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_deleteTimeseries(AsyncCallback callback, object state, long sessionId, List<string> path)
    {
      return send_deleteTimeseries(callback, state, sessionId, path);
    }

    public TSStatus End_deleteTimeseries(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_deleteTimeseries();
    }

    #endif

    public TSStatus deleteTimeseries(long sessionId, List<string> path)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_deleteTimeseries(null, null, sessionId, path);
      return End_deleteTimeseries(asyncResult);

      #else
      send_deleteTimeseries(sessionId, path);
      return recv_deleteTimeseries();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_deleteTimeseries(AsyncCallback callback, object state, long sessionId, List<string> path)
    {
      oprot_.WriteMessageBegin(new TMessage("deleteTimeseries", TMessageType.Call, seqid_));
      deleteTimeseries_args args = new deleteTimeseries_args();
      args.SessionId = sessionId;
      args.Path = path;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_deleteTimeseries(long sessionId, List<string> path)
    {
      oprot_.WriteMessageBegin(new TMessage("deleteTimeseries", TMessageType.Call, seqid_));
      deleteTimeseries_args args = new deleteTimeseries_args();
      args.SessionId = sessionId;
      args.Path = path;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public TSStatus recv_deleteTimeseries()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      deleteTimeseries_result result = new deleteTimeseries_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "deleteTimeseries failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_deleteStorageGroups(AsyncCallback callback, object state, long sessionId, List<string> storageGroup)
    {
      return send_deleteStorageGroups(callback, state, sessionId, storageGroup);
    }

    public TSStatus End_deleteStorageGroups(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_deleteStorageGroups();
    }

    #endif

    public TSStatus deleteStorageGroups(long sessionId, List<string> storageGroup)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_deleteStorageGroups(null, null, sessionId, storageGroup);
      return End_deleteStorageGroups(asyncResult);

      #else
      send_deleteStorageGroups(sessionId, storageGroup);
      return recv_deleteStorageGroups();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_deleteStorageGroups(AsyncCallback callback, object state, long sessionId, List<string> storageGroup)
    {
      oprot_.WriteMessageBegin(new TMessage("deleteStorageGroups", TMessageType.Call, seqid_));
      deleteStorageGroups_args args = new deleteStorageGroups_args();
      args.SessionId = sessionId;
      args.StorageGroup = storageGroup;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_deleteStorageGroups(long sessionId, List<string> storageGroup)
    {
      oprot_.WriteMessageBegin(new TMessage("deleteStorageGroups", TMessageType.Call, seqid_));
      deleteStorageGroups_args args = new deleteStorageGroups_args();
      args.SessionId = sessionId;
      args.StorageGroup = storageGroup;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public TSStatus recv_deleteStorageGroups()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      deleteStorageGroups_result result = new deleteStorageGroups_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "deleteStorageGroups failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_insertRecord(AsyncCallback callback, object state, TSInsertRecordReq req)
    {
      return send_insertRecord(callback, state, req);
    }

    public TSStatus End_insertRecord(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_insertRecord();
    }

    #endif

    public TSStatus insertRecord(TSInsertRecordReq req)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_insertRecord(null, null, req);
      return End_insertRecord(asyncResult);

      #else
      send_insertRecord(req);
      return recv_insertRecord();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_insertRecord(AsyncCallback callback, object state, TSInsertRecordReq req)
    {
      oprot_.WriteMessageBegin(new TMessage("insertRecord", TMessageType.Call, seqid_));
      insertRecord_args args = new insertRecord_args();
      args.Req = req;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_insertRecord(TSInsertRecordReq req)
    {
      oprot_.WriteMessageBegin(new TMessage("insertRecord", TMessageType.Call, seqid_));
      insertRecord_args args = new insertRecord_args();
      args.Req = req;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public TSStatus recv_insertRecord()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      insertRecord_result result = new insertRecord_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "insertRecord failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_insertStringRecord(AsyncCallback callback, object state, TSInsertStringRecordReq req)
    {
      return send_insertStringRecord(callback, state, req);
    }

    public TSStatus End_insertStringRecord(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_insertStringRecord();
    }

    #endif

    public TSStatus insertStringRecord(TSInsertStringRecordReq req)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_insertStringRecord(null, null, req);
      return End_insertStringRecord(asyncResult);

      #else
      send_insertStringRecord(req);
      return recv_insertStringRecord();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_insertStringRecord(AsyncCallback callback, object state, TSInsertStringRecordReq req)
    {
      oprot_.WriteMessageBegin(new TMessage("insertStringRecord", TMessageType.Call, seqid_));
      insertStringRecord_args args = new insertStringRecord_args();
      args.Req = req;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_insertStringRecord(TSInsertStringRecordReq req)
    {
      oprot_.WriteMessageBegin(new TMessage("insertStringRecord", TMessageType.Call, seqid_));
      insertStringRecord_args args = new insertStringRecord_args();
      args.Req = req;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public TSStatus recv_insertStringRecord()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      insertStringRecord_result result = new insertStringRecord_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "insertStringRecord failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_insertTablet(AsyncCallback callback, object state, TSInsertTabletReq req)
    {
      return send_insertTablet(callback, state, req);
    }

    public TSStatus End_insertTablet(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_insertTablet();
    }

    #endif

    public TSStatus insertTablet(TSInsertTabletReq req)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_insertTablet(null, null, req);
      return End_insertTablet(asyncResult);

      #else
      send_insertTablet(req);
      return recv_insertTablet();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_insertTablet(AsyncCallback callback, object state, TSInsertTabletReq req)
    {
      oprot_.WriteMessageBegin(new TMessage("insertTablet", TMessageType.Call, seqid_));
      insertTablet_args args = new insertTablet_args();
      args.Req = req;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_insertTablet(TSInsertTabletReq req)
    {
      oprot_.WriteMessageBegin(new TMessage("insertTablet", TMessageType.Call, seqid_));
      insertTablet_args args = new insertTablet_args();
      args.Req = req;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public TSStatus recv_insertTablet()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      insertTablet_result result = new insertTablet_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "insertTablet failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_insertTablets(AsyncCallback callback, object state, TSInsertTabletsReq req)
    {
      return send_insertTablets(callback, state, req);
    }

    public TSStatus End_insertTablets(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_insertTablets();
    }

    #endif

    public TSStatus insertTablets(TSInsertTabletsReq req)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_insertTablets(null, null, req);
      return End_insertTablets(asyncResult);

      #else
      send_insertTablets(req);
      return recv_insertTablets();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_insertTablets(AsyncCallback callback, object state, TSInsertTabletsReq req)
    {
      oprot_.WriteMessageBegin(new TMessage("insertTablets", TMessageType.Call, seqid_));
      insertTablets_args args = new insertTablets_args();
      args.Req = req;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_insertTablets(TSInsertTabletsReq req)
    {
      oprot_.WriteMessageBegin(new TMessage("insertTablets", TMessageType.Call, seqid_));
      insertTablets_args args = new insertTablets_args();
      args.Req = req;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public TSStatus recv_insertTablets()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      insertTablets_result result = new insertTablets_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "insertTablets failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_insertRecords(AsyncCallback callback, object state, TSInsertRecordsReq req)
    {
      return send_insertRecords(callback, state, req);
    }

    public TSStatus End_insertRecords(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_insertRecords();
    }

    #endif

    public TSStatus insertRecords(TSInsertRecordsReq req)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_insertRecords(null, null, req);
      return End_insertRecords(asyncResult);

      #else
      send_insertRecords(req);
      return recv_insertRecords();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_insertRecords(AsyncCallback callback, object state, TSInsertRecordsReq req)
    {
      oprot_.WriteMessageBegin(new TMessage("insertRecords", TMessageType.Call, seqid_));
      insertRecords_args args = new insertRecords_args();
      args.Req = req;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_insertRecords(TSInsertRecordsReq req)
    {
      oprot_.WriteMessageBegin(new TMessage("insertRecords", TMessageType.Call, seqid_));
      insertRecords_args args = new insertRecords_args();
      args.Req = req;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public TSStatus recv_insertRecords()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      insertRecords_result result = new insertRecords_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "insertRecords failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_insertRecordsOfOneDevice(AsyncCallback callback, object state, TSInsertRecordsOfOneDeviceReq req)
    {
      return send_insertRecordsOfOneDevice(callback, state, req);
    }

    public TSStatus End_insertRecordsOfOneDevice(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_insertRecordsOfOneDevice();
    }

    #endif

    public TSStatus insertRecordsOfOneDevice(TSInsertRecordsOfOneDeviceReq req)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_insertRecordsOfOneDevice(null, null, req);
      return End_insertRecordsOfOneDevice(asyncResult);

      #else
      send_insertRecordsOfOneDevice(req);
      return recv_insertRecordsOfOneDevice();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_insertRecordsOfOneDevice(AsyncCallback callback, object state, TSInsertRecordsOfOneDeviceReq req)
    {
      oprot_.WriteMessageBegin(new TMessage("insertRecordsOfOneDevice", TMessageType.Call, seqid_));
      insertRecordsOfOneDevice_args args = new insertRecordsOfOneDevice_args();
      args.Req = req;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_insertRecordsOfOneDevice(TSInsertRecordsOfOneDeviceReq req)
    {
      oprot_.WriteMessageBegin(new TMessage("insertRecordsOfOneDevice", TMessageType.Call, seqid_));
      insertRecordsOfOneDevice_args args = new insertRecordsOfOneDevice_args();
      args.Req = req;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public TSStatus recv_insertRecordsOfOneDevice()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      insertRecordsOfOneDevice_result result = new insertRecordsOfOneDevice_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "insertRecordsOfOneDevice failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_insertStringRecords(AsyncCallback callback, object state, TSInsertStringRecordsReq req)
    {
      return send_insertStringRecords(callback, state, req);
    }

    public TSStatus End_insertStringRecords(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_insertStringRecords();
    }

    #endif

    public TSStatus insertStringRecords(TSInsertStringRecordsReq req)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_insertStringRecords(null, null, req);
      return End_insertStringRecords(asyncResult);

      #else
      send_insertStringRecords(req);
      return recv_insertStringRecords();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_insertStringRecords(AsyncCallback callback, object state, TSInsertStringRecordsReq req)
    {
      oprot_.WriteMessageBegin(new TMessage("insertStringRecords", TMessageType.Call, seqid_));
      insertStringRecords_args args = new insertStringRecords_args();
      args.Req = req;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_insertStringRecords(TSInsertStringRecordsReq req)
    {
      oprot_.WriteMessageBegin(new TMessage("insertStringRecords", TMessageType.Call, seqid_));
      insertStringRecords_args args = new insertStringRecords_args();
      args.Req = req;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public TSStatus recv_insertStringRecords()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      insertStringRecords_result result = new insertStringRecords_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "insertStringRecords failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_testInsertTablet(AsyncCallback callback, object state, TSInsertTabletReq req)
    {
      return send_testInsertTablet(callback, state, req);
    }

    public TSStatus End_testInsertTablet(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_testInsertTablet();
    }

    #endif

    public TSStatus testInsertTablet(TSInsertTabletReq req)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_testInsertTablet(null, null, req);
      return End_testInsertTablet(asyncResult);

      #else
      send_testInsertTablet(req);
      return recv_testInsertTablet();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_testInsertTablet(AsyncCallback callback, object state, TSInsertTabletReq req)
    {
      oprot_.WriteMessageBegin(new TMessage("testInsertTablet", TMessageType.Call, seqid_));
      testInsertTablet_args args = new testInsertTablet_args();
      args.Req = req;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_testInsertTablet(TSInsertTabletReq req)
    {
      oprot_.WriteMessageBegin(new TMessage("testInsertTablet", TMessageType.Call, seqid_));
      testInsertTablet_args args = new testInsertTablet_args();
      args.Req = req;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public TSStatus recv_testInsertTablet()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      testInsertTablet_result result = new testInsertTablet_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "testInsertTablet failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_testInsertTablets(AsyncCallback callback, object state, TSInsertTabletsReq req)
    {
      return send_testInsertTablets(callback, state, req);
    }

    public TSStatus End_testInsertTablets(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_testInsertTablets();
    }

    #endif

    public TSStatus testInsertTablets(TSInsertTabletsReq req)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_testInsertTablets(null, null, req);
      return End_testInsertTablets(asyncResult);

      #else
      send_testInsertTablets(req);
      return recv_testInsertTablets();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_testInsertTablets(AsyncCallback callback, object state, TSInsertTabletsReq req)
    {
      oprot_.WriteMessageBegin(new TMessage("testInsertTablets", TMessageType.Call, seqid_));
      testInsertTablets_args args = new testInsertTablets_args();
      args.Req = req;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_testInsertTablets(TSInsertTabletsReq req)
    {
      oprot_.WriteMessageBegin(new TMessage("testInsertTablets", TMessageType.Call, seqid_));
      testInsertTablets_args args = new testInsertTablets_args();
      args.Req = req;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public TSStatus recv_testInsertTablets()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      testInsertTablets_result result = new testInsertTablets_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "testInsertTablets failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_testInsertRecord(AsyncCallback callback, object state, TSInsertRecordReq req)
    {
      return send_testInsertRecord(callback, state, req);
    }

    public TSStatus End_testInsertRecord(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_testInsertRecord();
    }

    #endif

    public TSStatus testInsertRecord(TSInsertRecordReq req)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_testInsertRecord(null, null, req);
      return End_testInsertRecord(asyncResult);

      #else
      send_testInsertRecord(req);
      return recv_testInsertRecord();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_testInsertRecord(AsyncCallback callback, object state, TSInsertRecordReq req)
    {
      oprot_.WriteMessageBegin(new TMessage("testInsertRecord", TMessageType.Call, seqid_));
      testInsertRecord_args args = new testInsertRecord_args();
      args.Req = req;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_testInsertRecord(TSInsertRecordReq req)
    {
      oprot_.WriteMessageBegin(new TMessage("testInsertRecord", TMessageType.Call, seqid_));
      testInsertRecord_args args = new testInsertRecord_args();
      args.Req = req;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public TSStatus recv_testInsertRecord()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      testInsertRecord_result result = new testInsertRecord_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "testInsertRecord failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_testInsertStringRecord(AsyncCallback callback, object state, TSInsertStringRecordReq req)
    {
      return send_testInsertStringRecord(callback, state, req);
    }

    public TSStatus End_testInsertStringRecord(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_testInsertStringRecord();
    }

    #endif

    public TSStatus testInsertStringRecord(TSInsertStringRecordReq req)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_testInsertStringRecord(null, null, req);
      return End_testInsertStringRecord(asyncResult);

      #else
      send_testInsertStringRecord(req);
      return recv_testInsertStringRecord();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_testInsertStringRecord(AsyncCallback callback, object state, TSInsertStringRecordReq req)
    {
      oprot_.WriteMessageBegin(new TMessage("testInsertStringRecord", TMessageType.Call, seqid_));
      testInsertStringRecord_args args = new testInsertStringRecord_args();
      args.Req = req;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_testInsertStringRecord(TSInsertStringRecordReq req)
    {
      oprot_.WriteMessageBegin(new TMessage("testInsertStringRecord", TMessageType.Call, seqid_));
      testInsertStringRecord_args args = new testInsertStringRecord_args();
      args.Req = req;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public TSStatus recv_testInsertStringRecord()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      testInsertStringRecord_result result = new testInsertStringRecord_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "testInsertStringRecord failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_testInsertRecords(AsyncCallback callback, object state, TSInsertRecordsReq req)
    {
      return send_testInsertRecords(callback, state, req);
    }

    public TSStatus End_testInsertRecords(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_testInsertRecords();
    }

    #endif

    public TSStatus testInsertRecords(TSInsertRecordsReq req)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_testInsertRecords(null, null, req);
      return End_testInsertRecords(asyncResult);

      #else
      send_testInsertRecords(req);
      return recv_testInsertRecords();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_testInsertRecords(AsyncCallback callback, object state, TSInsertRecordsReq req)
    {
      oprot_.WriteMessageBegin(new TMessage("testInsertRecords", TMessageType.Call, seqid_));
      testInsertRecords_args args = new testInsertRecords_args();
      args.Req = req;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_testInsertRecords(TSInsertRecordsReq req)
    {
      oprot_.WriteMessageBegin(new TMessage("testInsertRecords", TMessageType.Call, seqid_));
      testInsertRecords_args args = new testInsertRecords_args();
      args.Req = req;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public TSStatus recv_testInsertRecords()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      testInsertRecords_result result = new testInsertRecords_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "testInsertRecords failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_testInsertRecordsOfOneDevice(AsyncCallback callback, object state, TSInsertRecordsOfOneDeviceReq req)
    {
      return send_testInsertRecordsOfOneDevice(callback, state, req);
    }

    public TSStatus End_testInsertRecordsOfOneDevice(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_testInsertRecordsOfOneDevice();
    }

    #endif

    public TSStatus testInsertRecordsOfOneDevice(TSInsertRecordsOfOneDeviceReq req)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_testInsertRecordsOfOneDevice(null, null, req);
      return End_testInsertRecordsOfOneDevice(asyncResult);

      #else
      send_testInsertRecordsOfOneDevice(req);
      return recv_testInsertRecordsOfOneDevice();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_testInsertRecordsOfOneDevice(AsyncCallback callback, object state, TSInsertRecordsOfOneDeviceReq req)
    {
      oprot_.WriteMessageBegin(new TMessage("testInsertRecordsOfOneDevice", TMessageType.Call, seqid_));
      testInsertRecordsOfOneDevice_args args = new testInsertRecordsOfOneDevice_args();
      args.Req = req;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_testInsertRecordsOfOneDevice(TSInsertRecordsOfOneDeviceReq req)
    {
      oprot_.WriteMessageBegin(new TMessage("testInsertRecordsOfOneDevice", TMessageType.Call, seqid_));
      testInsertRecordsOfOneDevice_args args = new testInsertRecordsOfOneDevice_args();
      args.Req = req;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public TSStatus recv_testInsertRecordsOfOneDevice()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      testInsertRecordsOfOneDevice_result result = new testInsertRecordsOfOneDevice_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "testInsertRecordsOfOneDevice failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_testInsertStringRecords(AsyncCallback callback, object state, TSInsertStringRecordsReq req)
    {
      return send_testInsertStringRecords(callback, state, req);
    }

    public TSStatus End_testInsertStringRecords(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_testInsertStringRecords();
    }

    #endif

    public TSStatus testInsertStringRecords(TSInsertStringRecordsReq req)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_testInsertStringRecords(null, null, req);
      return End_testInsertStringRecords(asyncResult);

      #else
      send_testInsertStringRecords(req);
      return recv_testInsertStringRecords();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_testInsertStringRecords(AsyncCallback callback, object state, TSInsertStringRecordsReq req)
    {
      oprot_.WriteMessageBegin(new TMessage("testInsertStringRecords", TMessageType.Call, seqid_));
      testInsertStringRecords_args args = new testInsertStringRecords_args();
      args.Req = req;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_testInsertStringRecords(TSInsertStringRecordsReq req)
    {
      oprot_.WriteMessageBegin(new TMessage("testInsertStringRecords", TMessageType.Call, seqid_));
      testInsertStringRecords_args args = new testInsertStringRecords_args();
      args.Req = req;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public TSStatus recv_testInsertStringRecords()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      testInsertStringRecords_result result = new testInsertStringRecords_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "testInsertStringRecords failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_deleteData(AsyncCallback callback, object state, TSDeleteDataReq req)
    {
      return send_deleteData(callback, state, req);
    }

    public TSStatus End_deleteData(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_deleteData();
    }

    #endif

    public TSStatus deleteData(TSDeleteDataReq req)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_deleteData(null, null, req);
      return End_deleteData(asyncResult);

      #else
      send_deleteData(req);
      return recv_deleteData();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_deleteData(AsyncCallback callback, object state, TSDeleteDataReq req)
    {
      oprot_.WriteMessageBegin(new TMessage("deleteData", TMessageType.Call, seqid_));
      deleteData_args args = new deleteData_args();
      args.Req = req;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_deleteData(TSDeleteDataReq req)
    {
      oprot_.WriteMessageBegin(new TMessage("deleteData", TMessageType.Call, seqid_));
      deleteData_args args = new deleteData_args();
      args.Req = req;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public TSStatus recv_deleteData()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      deleteData_result result = new deleteData_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "deleteData failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_executeRawDataQuery(AsyncCallback callback, object state, TSRawDataQueryReq req)
    {
      return send_executeRawDataQuery(callback, state, req);
    }

    public TSExecuteStatementResp End_executeRawDataQuery(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_executeRawDataQuery();
    }

    #endif

    public TSExecuteStatementResp executeRawDataQuery(TSRawDataQueryReq req)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_executeRawDataQuery(null, null, req);
      return End_executeRawDataQuery(asyncResult);

      #else
      send_executeRawDataQuery(req);
      return recv_executeRawDataQuery();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_executeRawDataQuery(AsyncCallback callback, object state, TSRawDataQueryReq req)
    {
      oprot_.WriteMessageBegin(new TMessage("executeRawDataQuery", TMessageType.Call, seqid_));
      executeRawDataQuery_args args = new executeRawDataQuery_args();
      args.Req = req;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_executeRawDataQuery(TSRawDataQueryReq req)
    {
      oprot_.WriteMessageBegin(new TMessage("executeRawDataQuery", TMessageType.Call, seqid_));
      executeRawDataQuery_args args = new executeRawDataQuery_args();
      args.Req = req;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public TSExecuteStatementResp recv_executeRawDataQuery()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      executeRawDataQuery_result result = new executeRawDataQuery_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "executeRawDataQuery failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_requestStatementId(AsyncCallback callback, object state, long sessionId)
    {
      return send_requestStatementId(callback, state, sessionId);
    }

    public long End_requestStatementId(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_requestStatementId();
    }

    #endif

    public long requestStatementId(long sessionId)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_requestStatementId(null, null, sessionId);
      return End_requestStatementId(asyncResult);

      #else
      send_requestStatementId(sessionId);
      return recv_requestStatementId();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_requestStatementId(AsyncCallback callback, object state, long sessionId)
    {
      oprot_.WriteMessageBegin(new TMessage("requestStatementId", TMessageType.Call, seqid_));
      requestStatementId_args args = new requestStatementId_args();
      args.SessionId = sessionId;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_requestStatementId(long sessionId)
    {
      oprot_.WriteMessageBegin(new TMessage("requestStatementId", TMessageType.Call, seqid_));
      requestStatementId_args args = new requestStatementId_args();
      args.SessionId = sessionId;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public long recv_requestStatementId()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      requestStatementId_result result = new requestStatementId_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "requestStatementId failed: unknown result");
    }

  }
  public class Processor : TProcessor {
    public Processor(ISync iface)
    {
      iface_ = iface;
      processMap_["openSession"] = openSession_Process;
      processMap_["closeSession"] = closeSession_Process;
      processMap_["executeStatement"] = executeStatement_Process;
      processMap_["executeBatchStatement"] = executeBatchStatement_Process;
      processMap_["executeQueryStatement"] = executeQueryStatement_Process;
      processMap_["executeUpdateStatement"] = executeUpdateStatement_Process;
      processMap_["fetchResults"] = fetchResults_Process;
      processMap_["fetchMetadata"] = fetchMetadata_Process;
      processMap_["cancelOperation"] = cancelOperation_Process;
      processMap_["closeOperation"] = closeOperation_Process;
      processMap_["getTimeZone"] = getTimeZone_Process;
      processMap_["setTimeZone"] = setTimeZone_Process;
      processMap_["getProperties"] = getProperties_Process;
      processMap_["setStorageGroup"] = setStorageGroup_Process;
      processMap_["createTimeseries"] = createTimeseries_Process;
      processMap_["createMultiTimeseries"] = createMultiTimeseries_Process;
      processMap_["deleteTimeseries"] = deleteTimeseries_Process;
      processMap_["deleteStorageGroups"] = deleteStorageGroups_Process;
      processMap_["insertRecord"] = insertRecord_Process;
      processMap_["insertStringRecord"] = insertStringRecord_Process;
      processMap_["insertTablet"] = insertTablet_Process;
      processMap_["insertTablets"] = insertTablets_Process;
      processMap_["insertRecords"] = insertRecords_Process;
      processMap_["insertRecordsOfOneDevice"] = insertRecordsOfOneDevice_Process;
      processMap_["insertStringRecords"] = insertStringRecords_Process;
      processMap_["testInsertTablet"] = testInsertTablet_Process;
      processMap_["testInsertTablets"] = testInsertTablets_Process;
      processMap_["testInsertRecord"] = testInsertRecord_Process;
      processMap_["testInsertStringRecord"] = testInsertStringRecord_Process;
      processMap_["testInsertRecords"] = testInsertRecords_Process;
      processMap_["testInsertRecordsOfOneDevice"] = testInsertRecordsOfOneDevice_Process;
      processMap_["testInsertStringRecords"] = testInsertStringRecords_Process;
      processMap_["deleteData"] = deleteData_Process;
      processMap_["executeRawDataQuery"] = executeRawDataQuery_Process;
      processMap_["requestStatementId"] = requestStatementId_Process;
    }

    protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
    private ISync iface_;
    protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

    public bool Process(TProtocol iprot, TProtocol oprot)
    {
      try
      {
        TMessage msg = iprot.ReadMessageBegin();
        ProcessFunction fn;
        processMap_.TryGetValue(msg.Name, out fn);
        if (fn == null) {
          TProtocolUtil.Skip(iprot, TType.Struct);
          iprot.ReadMessageEnd();
          TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
          oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
          x.Write(oprot);
          oprot.WriteMessageEnd();
          oprot.Transport.Flush();
          return true;
        }
        fn(msg.SeqID, iprot, oprot);
      }
      catch (IOException)
      {
        return false;
      }
      return true;
    }

    public void openSession_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      openSession_args args = new openSession_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      openSession_result result = new openSession_result();
      try
      {
        result.Success = iface_.openSession(args.Req);
        oprot.WriteMessageBegin(new TMessage("openSession", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("openSession", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void closeSession_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      closeSession_args args = new closeSession_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      closeSession_result result = new closeSession_result();
      try
      {
        result.Success = iface_.closeSession(args.Req);
        oprot.WriteMessageBegin(new TMessage("closeSession", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("closeSession", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void executeStatement_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      executeStatement_args args = new executeStatement_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      executeStatement_result result = new executeStatement_result();
      try
      {
        result.Success = iface_.executeStatement(args.Req);
        oprot.WriteMessageBegin(new TMessage("executeStatement", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("executeStatement", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void executeBatchStatement_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      executeBatchStatement_args args = new executeBatchStatement_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      executeBatchStatement_result result = new executeBatchStatement_result();
      try
      {
        result.Success = iface_.executeBatchStatement(args.Req);
        oprot.WriteMessageBegin(new TMessage("executeBatchStatement", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("executeBatchStatement", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void executeQueryStatement_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      executeQueryStatement_args args = new executeQueryStatement_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      executeQueryStatement_result result = new executeQueryStatement_result();
      try
      {
        result.Success = iface_.executeQueryStatement(args.Req);
        oprot.WriteMessageBegin(new TMessage("executeQueryStatement", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("executeQueryStatement", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void executeUpdateStatement_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      executeUpdateStatement_args args = new executeUpdateStatement_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      executeUpdateStatement_result result = new executeUpdateStatement_result();
      try
      {
        result.Success = iface_.executeUpdateStatement(args.Req);
        oprot.WriteMessageBegin(new TMessage("executeUpdateStatement", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("executeUpdateStatement", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void fetchResults_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      fetchResults_args args = new fetchResults_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      fetchResults_result result = new fetchResults_result();
      try
      {
        result.Success = iface_.fetchResults(args.Req);
        oprot.WriteMessageBegin(new TMessage("fetchResults", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("fetchResults", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void fetchMetadata_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      fetchMetadata_args args = new fetchMetadata_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      fetchMetadata_result result = new fetchMetadata_result();
      try
      {
        result.Success = iface_.fetchMetadata(args.Req);
        oprot.WriteMessageBegin(new TMessage("fetchMetadata", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("fetchMetadata", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void cancelOperation_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      cancelOperation_args args = new cancelOperation_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      cancelOperation_result result = new cancelOperation_result();
      try
      {
        result.Success = iface_.cancelOperation(args.Req);
        oprot.WriteMessageBegin(new TMessage("cancelOperation", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("cancelOperation", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void closeOperation_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      closeOperation_args args = new closeOperation_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      closeOperation_result result = new closeOperation_result();
      try
      {
        result.Success = iface_.closeOperation(args.Req);
        oprot.WriteMessageBegin(new TMessage("closeOperation", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("closeOperation", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getTimeZone_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getTimeZone_args args = new getTimeZone_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getTimeZone_result result = new getTimeZone_result();
      try
      {
        result.Success = iface_.getTimeZone(args.SessionId);
        oprot.WriteMessageBegin(new TMessage("getTimeZone", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getTimeZone", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void setTimeZone_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      setTimeZone_args args = new setTimeZone_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      setTimeZone_result result = new setTimeZone_result();
      try
      {
        result.Success = iface_.setTimeZone(args.Req);
        oprot.WriteMessageBegin(new TMessage("setTimeZone", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("setTimeZone", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getProperties_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getProperties_args args = new getProperties_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getProperties_result result = new getProperties_result();
      try
      {
        result.Success = iface_.getProperties();
        oprot.WriteMessageBegin(new TMessage("getProperties", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getProperties", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void setStorageGroup_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      setStorageGroup_args args = new setStorageGroup_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      setStorageGroup_result result = new setStorageGroup_result();
      try
      {
        result.Success = iface_.setStorageGroup(args.SessionId, args.StorageGroup);
        oprot.WriteMessageBegin(new TMessage("setStorageGroup", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("setStorageGroup", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void createTimeseries_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      createTimeseries_args args = new createTimeseries_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      createTimeseries_result result = new createTimeseries_result();
      try
      {
        result.Success = iface_.createTimeseries(args.Req);
        oprot.WriteMessageBegin(new TMessage("createTimeseries", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("createTimeseries", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void createMultiTimeseries_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      createMultiTimeseries_args args = new createMultiTimeseries_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      createMultiTimeseries_result result = new createMultiTimeseries_result();
      try
      {
        result.Success = iface_.createMultiTimeseries(args.Req);
        oprot.WriteMessageBegin(new TMessage("createMultiTimeseries", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("createMultiTimeseries", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void deleteTimeseries_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      deleteTimeseries_args args = new deleteTimeseries_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      deleteTimeseries_result result = new deleteTimeseries_result();
      try
      {
        result.Success = iface_.deleteTimeseries(args.SessionId, args.Path);
        oprot.WriteMessageBegin(new TMessage("deleteTimeseries", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("deleteTimeseries", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void deleteStorageGroups_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      deleteStorageGroups_args args = new deleteStorageGroups_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      deleteStorageGroups_result result = new deleteStorageGroups_result();
      try
      {
        result.Success = iface_.deleteStorageGroups(args.SessionId, args.StorageGroup);
        oprot.WriteMessageBegin(new TMessage("deleteStorageGroups", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("deleteStorageGroups", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void insertRecord_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      insertRecord_args args = new insertRecord_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      insertRecord_result result = new insertRecord_result();
      try
      {
        result.Success = iface_.insertRecord(args.Req);
        oprot.WriteMessageBegin(new TMessage("insertRecord", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("insertRecord", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void insertStringRecord_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      insertStringRecord_args args = new insertStringRecord_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      insertStringRecord_result result = new insertStringRecord_result();
      try
      {
        result.Success = iface_.insertStringRecord(args.Req);
        oprot.WriteMessageBegin(new TMessage("insertStringRecord", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("insertStringRecord", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void insertTablet_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      insertTablet_args args = new insertTablet_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      insertTablet_result result = new insertTablet_result();
      try
      {
        result.Success = iface_.insertTablet(args.Req);
        oprot.WriteMessageBegin(new TMessage("insertTablet", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("insertTablet", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void insertTablets_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      insertTablets_args args = new insertTablets_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      insertTablets_result result = new insertTablets_result();
      try
      {
        result.Success = iface_.insertTablets(args.Req);
        oprot.WriteMessageBegin(new TMessage("insertTablets", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("insertTablets", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void insertRecords_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      insertRecords_args args = new insertRecords_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      insertRecords_result result = new insertRecords_result();
      try
      {
        result.Success = iface_.insertRecords(args.Req);
        oprot.WriteMessageBegin(new TMessage("insertRecords", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("insertRecords", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void insertRecordsOfOneDevice_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      insertRecordsOfOneDevice_args args = new insertRecordsOfOneDevice_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      insertRecordsOfOneDevice_result result = new insertRecordsOfOneDevice_result();
      try
      {
        result.Success = iface_.insertRecordsOfOneDevice(args.Req);
        oprot.WriteMessageBegin(new TMessage("insertRecordsOfOneDevice", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("insertRecordsOfOneDevice", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void insertStringRecords_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      insertStringRecords_args args = new insertStringRecords_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      insertStringRecords_result result = new insertStringRecords_result();
      try
      {
        result.Success = iface_.insertStringRecords(args.Req);
        oprot.WriteMessageBegin(new TMessage("insertStringRecords", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("insertStringRecords", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void testInsertTablet_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      testInsertTablet_args args = new testInsertTablet_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      testInsertTablet_result result = new testInsertTablet_result();
      try
      {
        result.Success = iface_.testInsertTablet(args.Req);
        oprot.WriteMessageBegin(new TMessage("testInsertTablet", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("testInsertTablet", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void testInsertTablets_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      testInsertTablets_args args = new testInsertTablets_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      testInsertTablets_result result = new testInsertTablets_result();
      try
      {
        result.Success = iface_.testInsertTablets(args.Req);
        oprot.WriteMessageBegin(new TMessage("testInsertTablets", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("testInsertTablets", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void testInsertRecord_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      testInsertRecord_args args = new testInsertRecord_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      testInsertRecord_result result = new testInsertRecord_result();
      try
      {
        result.Success = iface_.testInsertRecord(args.Req);
        oprot.WriteMessageBegin(new TMessage("testInsertRecord", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("testInsertRecord", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void testInsertStringRecord_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      testInsertStringRecord_args args = new testInsertStringRecord_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      testInsertStringRecord_result result = new testInsertStringRecord_result();
      try
      {
        result.Success = iface_.testInsertStringRecord(args.Req);
        oprot.WriteMessageBegin(new TMessage("testInsertStringRecord", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("testInsertStringRecord", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void testInsertRecords_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      testInsertRecords_args args = new testInsertRecords_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      testInsertRecords_result result = new testInsertRecords_result();
      try
      {
        result.Success = iface_.testInsertRecords(args.Req);
        oprot.WriteMessageBegin(new TMessage("testInsertRecords", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("testInsertRecords", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void testInsertRecordsOfOneDevice_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      testInsertRecordsOfOneDevice_args args = new testInsertRecordsOfOneDevice_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      testInsertRecordsOfOneDevice_result result = new testInsertRecordsOfOneDevice_result();
      try
      {
        result.Success = iface_.testInsertRecordsOfOneDevice(args.Req);
        oprot.WriteMessageBegin(new TMessage("testInsertRecordsOfOneDevice", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("testInsertRecordsOfOneDevice", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void testInsertStringRecords_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      testInsertStringRecords_args args = new testInsertStringRecords_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      testInsertStringRecords_result result = new testInsertStringRecords_result();
      try
      {
        result.Success = iface_.testInsertStringRecords(args.Req);
        oprot.WriteMessageBegin(new TMessage("testInsertStringRecords", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("testInsertStringRecords", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void deleteData_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      deleteData_args args = new deleteData_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      deleteData_result result = new deleteData_result();
      try
      {
        result.Success = iface_.deleteData(args.Req);
        oprot.WriteMessageBegin(new TMessage("deleteData", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("deleteData", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void executeRawDataQuery_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      executeRawDataQuery_args args = new executeRawDataQuery_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      executeRawDataQuery_result result = new executeRawDataQuery_result();
      try
      {
        result.Success = iface_.executeRawDataQuery(args.Req);
        oprot.WriteMessageBegin(new TMessage("executeRawDataQuery", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("executeRawDataQuery", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void requestStatementId_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      requestStatementId_args args = new requestStatementId_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      requestStatementId_result result = new requestStatementId_result();
      try
      {
        result.Success = iface_.requestStatementId(args.SessionId);
        oprot.WriteMessageBegin(new TMessage("requestStatementId", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("requestStatementId", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class openSession_args : TBase
  {
    private TSOpenSessionReq _req;

    public TSOpenSessionReq Req
    {
      get
      {
        return _req;
      }
      set
      {
        __isset.req = true;
        this._req = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool req;
    }

    public openSession_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Req = new TSOpenSessionReq();
                Req.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("openSession_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Req != null && __isset.req) {
          field.Name = "req";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Req.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("openSession_args(");
      bool __first = true;
      if (Req != null && __isset.req) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Req: ");
        __sb.Append(Req== null ? "<null>" : Req.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class openSession_result : TBase
  {
    private TSOpenSessionResp _success;

    public TSOpenSessionResp Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public openSession_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new TSOpenSessionResp();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("openSession_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("openSession_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class closeSession_args : TBase
  {
    private TSCloseSessionReq _req;

    public TSCloseSessionReq Req
    {
      get
      {
        return _req;
      }
      set
      {
        __isset.req = true;
        this._req = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool req;
    }

    public closeSession_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Req = new TSCloseSessionReq();
                Req.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("closeSession_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Req != null && __isset.req) {
          field.Name = "req";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Req.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("closeSession_args(");
      bool __first = true;
      if (Req != null && __isset.req) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Req: ");
        __sb.Append(Req== null ? "<null>" : Req.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class closeSession_result : TBase
  {
    private TSStatus _success;

    public TSStatus Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public closeSession_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new TSStatus();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("closeSession_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("closeSession_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class executeStatement_args : TBase
  {
    private TSExecuteStatementReq _req;

    public TSExecuteStatementReq Req
    {
      get
      {
        return _req;
      }
      set
      {
        __isset.req = true;
        this._req = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool req;
    }

    public executeStatement_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Req = new TSExecuteStatementReq();
                Req.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("executeStatement_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Req != null && __isset.req) {
          field.Name = "req";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Req.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("executeStatement_args(");
      bool __first = true;
      if (Req != null && __isset.req) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Req: ");
        __sb.Append(Req== null ? "<null>" : Req.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class executeStatement_result : TBase
  {
    private TSExecuteStatementResp _success;

    public TSExecuteStatementResp Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public executeStatement_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new TSExecuteStatementResp();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("executeStatement_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("executeStatement_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class executeBatchStatement_args : TBase
  {
    private TSExecuteBatchStatementReq _req;

    public TSExecuteBatchStatementReq Req
    {
      get
      {
        return _req;
      }
      set
      {
        __isset.req = true;
        this._req = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool req;
    }

    public executeBatchStatement_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Req = new TSExecuteBatchStatementReq();
                Req.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("executeBatchStatement_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Req != null && __isset.req) {
          field.Name = "req";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Req.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("executeBatchStatement_args(");
      bool __first = true;
      if (Req != null && __isset.req) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Req: ");
        __sb.Append(Req== null ? "<null>" : Req.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class executeBatchStatement_result : TBase
  {
    private TSStatus _success;

    public TSStatus Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public executeBatchStatement_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new TSStatus();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("executeBatchStatement_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("executeBatchStatement_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class executeQueryStatement_args : TBase
  {
    private TSExecuteStatementReq _req;

    public TSExecuteStatementReq Req
    {
      get
      {
        return _req;
      }
      set
      {
        __isset.req = true;
        this._req = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool req;
    }

    public executeQueryStatement_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Req = new TSExecuteStatementReq();
                Req.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("executeQueryStatement_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Req != null && __isset.req) {
          field.Name = "req";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Req.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("executeQueryStatement_args(");
      bool __first = true;
      if (Req != null && __isset.req) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Req: ");
        __sb.Append(Req== null ? "<null>" : Req.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class executeQueryStatement_result : TBase
  {
    private TSExecuteStatementResp _success;

    public TSExecuteStatementResp Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public executeQueryStatement_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new TSExecuteStatementResp();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("executeQueryStatement_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("executeQueryStatement_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class executeUpdateStatement_args : TBase
  {
    private TSExecuteStatementReq _req;

    public TSExecuteStatementReq Req
    {
      get
      {
        return _req;
      }
      set
      {
        __isset.req = true;
        this._req = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool req;
    }

    public executeUpdateStatement_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Req = new TSExecuteStatementReq();
                Req.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("executeUpdateStatement_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Req != null && __isset.req) {
          field.Name = "req";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Req.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("executeUpdateStatement_args(");
      bool __first = true;
      if (Req != null && __isset.req) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Req: ");
        __sb.Append(Req== null ? "<null>" : Req.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class executeUpdateStatement_result : TBase
  {
    private TSExecuteStatementResp _success;

    public TSExecuteStatementResp Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public executeUpdateStatement_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new TSExecuteStatementResp();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("executeUpdateStatement_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("executeUpdateStatement_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class fetchResults_args : TBase
  {
    private TSFetchResultsReq _req;

    public TSFetchResultsReq Req
    {
      get
      {
        return _req;
      }
      set
      {
        __isset.req = true;
        this._req = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool req;
    }

    public fetchResults_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Req = new TSFetchResultsReq();
                Req.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("fetchResults_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Req != null && __isset.req) {
          field.Name = "req";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Req.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("fetchResults_args(");
      bool __first = true;
      if (Req != null && __isset.req) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Req: ");
        __sb.Append(Req== null ? "<null>" : Req.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class fetchResults_result : TBase
  {
    private TSFetchResultsResp _success;

    public TSFetchResultsResp Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public fetchResults_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new TSFetchResultsResp();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("fetchResults_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("fetchResults_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class fetchMetadata_args : TBase
  {
    private TSFetchMetadataReq _req;

    public TSFetchMetadataReq Req
    {
      get
      {
        return _req;
      }
      set
      {
        __isset.req = true;
        this._req = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool req;
    }

    public fetchMetadata_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Req = new TSFetchMetadataReq();
                Req.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("fetchMetadata_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Req != null && __isset.req) {
          field.Name = "req";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Req.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("fetchMetadata_args(");
      bool __first = true;
      if (Req != null && __isset.req) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Req: ");
        __sb.Append(Req== null ? "<null>" : Req.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class fetchMetadata_result : TBase
  {
    private TSFetchMetadataResp _success;

    public TSFetchMetadataResp Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public fetchMetadata_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new TSFetchMetadataResp();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("fetchMetadata_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("fetchMetadata_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class cancelOperation_args : TBase
  {
    private TSCancelOperationReq _req;

    public TSCancelOperationReq Req
    {
      get
      {
        return _req;
      }
      set
      {
        __isset.req = true;
        this._req = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool req;
    }

    public cancelOperation_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Req = new TSCancelOperationReq();
                Req.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("cancelOperation_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Req != null && __isset.req) {
          field.Name = "req";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Req.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("cancelOperation_args(");
      bool __first = true;
      if (Req != null && __isset.req) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Req: ");
        __sb.Append(Req== null ? "<null>" : Req.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class cancelOperation_result : TBase
  {
    private TSStatus _success;

    public TSStatus Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public cancelOperation_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new TSStatus();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("cancelOperation_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("cancelOperation_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class closeOperation_args : TBase
  {
    private TSCloseOperationReq _req;

    public TSCloseOperationReq Req
    {
      get
      {
        return _req;
      }
      set
      {
        __isset.req = true;
        this._req = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool req;
    }

    public closeOperation_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Req = new TSCloseOperationReq();
                Req.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("closeOperation_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Req != null && __isset.req) {
          field.Name = "req";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Req.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("closeOperation_args(");
      bool __first = true;
      if (Req != null && __isset.req) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Req: ");
        __sb.Append(Req== null ? "<null>" : Req.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class closeOperation_result : TBase
  {
    private TSStatus _success;

    public TSStatus Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public closeOperation_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new TSStatus();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("closeOperation_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("closeOperation_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getTimeZone_args : TBase
  {
    private long _sessionId;

    public long SessionId
    {
      get
      {
        return _sessionId;
      }
      set
      {
        __isset.sessionId = true;
        this._sessionId = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool sessionId;
    }

    public getTimeZone_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                SessionId = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getTimeZone_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.sessionId) {
          field.Name = "sessionId";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(SessionId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getTimeZone_args(");
      bool __first = true;
      if (__isset.sessionId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("SessionId: ");
        __sb.Append(SessionId);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getTimeZone_result : TBase
  {
    private TSGetTimeZoneResp _success;

    public TSGetTimeZoneResp Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public getTimeZone_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new TSGetTimeZoneResp();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getTimeZone_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getTimeZone_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class setTimeZone_args : TBase
  {
    private TSSetTimeZoneReq _req;

    public TSSetTimeZoneReq Req
    {
      get
      {
        return _req;
      }
      set
      {
        __isset.req = true;
        this._req = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool req;
    }

    public setTimeZone_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Req = new TSSetTimeZoneReq();
                Req.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("setTimeZone_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Req != null && __isset.req) {
          field.Name = "req";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Req.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("setTimeZone_args(");
      bool __first = true;
      if (Req != null && __isset.req) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Req: ");
        __sb.Append(Req== null ? "<null>" : Req.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class setTimeZone_result : TBase
  {
    private TSStatus _success;

    public TSStatus Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public setTimeZone_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new TSStatus();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("setTimeZone_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("setTimeZone_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getProperties_args : TBase
  {

    public getProperties_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getProperties_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getProperties_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getProperties_result : TBase
  {
    private ServerProperties _success;

    public ServerProperties Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public getProperties_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new ServerProperties();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getProperties_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getProperties_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class setStorageGroup_args : TBase
  {
    private long _sessionId;
    private string _storageGroup;

    public long SessionId
    {
      get
      {
        return _sessionId;
      }
      set
      {
        __isset.sessionId = true;
        this._sessionId = value;
      }
    }

    public string StorageGroup
    {
      get
      {
        return _storageGroup;
      }
      set
      {
        __isset.storageGroup = true;
        this._storageGroup = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool sessionId;
      public bool storageGroup;
    }

    public setStorageGroup_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                SessionId = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                StorageGroup = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("setStorageGroup_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.sessionId) {
          field.Name = "sessionId";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(SessionId);
          oprot.WriteFieldEnd();
        }
        if (StorageGroup != null && __isset.storageGroup) {
          field.Name = "storageGroup";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(StorageGroup);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("setStorageGroup_args(");
      bool __first = true;
      if (__isset.sessionId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("SessionId: ");
        __sb.Append(SessionId);
      }
      if (StorageGroup != null && __isset.storageGroup) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("StorageGroup: ");
        __sb.Append(StorageGroup);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class setStorageGroup_result : TBase
  {
    private TSStatus _success;

    public TSStatus Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public setStorageGroup_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new TSStatus();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("setStorageGroup_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("setStorageGroup_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class createTimeseries_args : TBase
  {
    private TSCreateTimeseriesReq _req;

    public TSCreateTimeseriesReq Req
    {
      get
      {
        return _req;
      }
      set
      {
        __isset.req = true;
        this._req = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool req;
    }

    public createTimeseries_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Req = new TSCreateTimeseriesReq();
                Req.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("createTimeseries_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Req != null && __isset.req) {
          field.Name = "req";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Req.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("createTimeseries_args(");
      bool __first = true;
      if (Req != null && __isset.req) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Req: ");
        __sb.Append(Req== null ? "<null>" : Req.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class createTimeseries_result : TBase
  {
    private TSStatus _success;

    public TSStatus Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public createTimeseries_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new TSStatus();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("createTimeseries_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("createTimeseries_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class createMultiTimeseries_args : TBase
  {
    private TSCreateMultiTimeseriesReq _req;

    public TSCreateMultiTimeseriesReq Req
    {
      get
      {
        return _req;
      }
      set
      {
        __isset.req = true;
        this._req = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool req;
    }

    public createMultiTimeseries_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Req = new TSCreateMultiTimeseriesReq();
                Req.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("createMultiTimeseries_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Req != null && __isset.req) {
          field.Name = "req";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Req.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("createMultiTimeseries_args(");
      bool __first = true;
      if (Req != null && __isset.req) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Req: ");
        __sb.Append(Req== null ? "<null>" : Req.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class createMultiTimeseries_result : TBase
  {
    private TSStatus _success;

    public TSStatus Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public createMultiTimeseries_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new TSStatus();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("createMultiTimeseries_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("createMultiTimeseries_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class deleteTimeseries_args : TBase
  {
    private long _sessionId;
    private List<string> _path;

    public long SessionId
    {
      get
      {
        return _sessionId;
      }
      set
      {
        __isset.sessionId = true;
        this._sessionId = value;
      }
    }

    public List<string> Path
    {
      get
      {
        return _path;
      }
      set
      {
        __isset.path = true;
        this._path = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool sessionId;
      public bool path;
    }

    public deleteTimeseries_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                SessionId = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.List) {
                {
                  Path = new List<string>();
                  TList _list237 = iprot.ReadListBegin();
                  for( int _i238 = 0; _i238 < _list237.Count; ++_i238)
                  {
                    string _elem239;
                    _elem239 = iprot.ReadString();
                    Path.Add(_elem239);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("deleteTimeseries_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.sessionId) {
          field.Name = "sessionId";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(SessionId);
          oprot.WriteFieldEnd();
        }
        if (Path != null && __isset.path) {
          field.Name = "path";
          field.Type = TType.List;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.String, Path.Count));
            foreach (string _iter240 in Path)
            {
              oprot.WriteString(_iter240);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("deleteTimeseries_args(");
      bool __first = true;
      if (__isset.sessionId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("SessionId: ");
        __sb.Append(SessionId);
      }
      if (Path != null && __isset.path) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Path: ");
        __sb.Append(Path);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class deleteTimeseries_result : TBase
  {
    private TSStatus _success;

    public TSStatus Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public deleteTimeseries_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new TSStatus();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("deleteTimeseries_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("deleteTimeseries_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class deleteStorageGroups_args : TBase
  {
    private long _sessionId;
    private List<string> _storageGroup;

    public long SessionId
    {
      get
      {
        return _sessionId;
      }
      set
      {
        __isset.sessionId = true;
        this._sessionId = value;
      }
    }

    public List<string> StorageGroup
    {
      get
      {
        return _storageGroup;
      }
      set
      {
        __isset.storageGroup = true;
        this._storageGroup = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool sessionId;
      public bool storageGroup;
    }

    public deleteStorageGroups_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                SessionId = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.List) {
                {
                  StorageGroup = new List<string>();
                  TList _list241 = iprot.ReadListBegin();
                  for( int _i242 = 0; _i242 < _list241.Count; ++_i242)
                  {
                    string _elem243;
                    _elem243 = iprot.ReadString();
                    StorageGroup.Add(_elem243);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("deleteStorageGroups_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.sessionId) {
          field.Name = "sessionId";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(SessionId);
          oprot.WriteFieldEnd();
        }
        if (StorageGroup != null && __isset.storageGroup) {
          field.Name = "storageGroup";
          field.Type = TType.List;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.String, StorageGroup.Count));
            foreach (string _iter244 in StorageGroup)
            {
              oprot.WriteString(_iter244);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("deleteStorageGroups_args(");
      bool __first = true;
      if (__isset.sessionId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("SessionId: ");
        __sb.Append(SessionId);
      }
      if (StorageGroup != null && __isset.storageGroup) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("StorageGroup: ");
        __sb.Append(StorageGroup);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class deleteStorageGroups_result : TBase
  {
    private TSStatus _success;

    public TSStatus Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public deleteStorageGroups_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new TSStatus();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("deleteStorageGroups_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("deleteStorageGroups_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class insertRecord_args : TBase
  {
    private TSInsertRecordReq _req;

    public TSInsertRecordReq Req
    {
      get
      {
        return _req;
      }
      set
      {
        __isset.req = true;
        this._req = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool req;
    }

    public insertRecord_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Req = new TSInsertRecordReq();
                Req.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("insertRecord_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Req != null && __isset.req) {
          field.Name = "req";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Req.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("insertRecord_args(");
      bool __first = true;
      if (Req != null && __isset.req) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Req: ");
        __sb.Append(Req== null ? "<null>" : Req.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class insertRecord_result : TBase
  {
    private TSStatus _success;

    public TSStatus Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public insertRecord_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new TSStatus();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("insertRecord_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("insertRecord_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class insertStringRecord_args : TBase
  {
    private TSInsertStringRecordReq _req;

    public TSInsertStringRecordReq Req
    {
      get
      {
        return _req;
      }
      set
      {
        __isset.req = true;
        this._req = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool req;
    }

    public insertStringRecord_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Req = new TSInsertStringRecordReq();
                Req.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("insertStringRecord_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Req != null && __isset.req) {
          field.Name = "req";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Req.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("insertStringRecord_args(");
      bool __first = true;
      if (Req != null && __isset.req) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Req: ");
        __sb.Append(Req== null ? "<null>" : Req.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class insertStringRecord_result : TBase
  {
    private TSStatus _success;

    public TSStatus Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public insertStringRecord_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new TSStatus();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("insertStringRecord_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("insertStringRecord_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class insertTablet_args : TBase
  {
    private TSInsertTabletReq _req;

    public TSInsertTabletReq Req
    {
      get
      {
        return _req;
      }
      set
      {
        __isset.req = true;
        this._req = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool req;
    }

    public insertTablet_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Req = new TSInsertTabletReq();
                Req.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("insertTablet_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Req != null && __isset.req) {
          field.Name = "req";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Req.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("insertTablet_args(");
      bool __first = true;
      if (Req != null && __isset.req) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Req: ");
        __sb.Append(Req== null ? "<null>" : Req.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class insertTablet_result : TBase
  {
    private TSStatus _success;

    public TSStatus Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public insertTablet_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new TSStatus();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("insertTablet_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("insertTablet_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class insertTablets_args : TBase
  {
    private TSInsertTabletsReq _req;

    public TSInsertTabletsReq Req
    {
      get
      {
        return _req;
      }
      set
      {
        __isset.req = true;
        this._req = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool req;
    }

    public insertTablets_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Req = new TSInsertTabletsReq();
                Req.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("insertTablets_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Req != null && __isset.req) {
          field.Name = "req";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Req.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("insertTablets_args(");
      bool __first = true;
      if (Req != null && __isset.req) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Req: ");
        __sb.Append(Req== null ? "<null>" : Req.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class insertTablets_result : TBase
  {
    private TSStatus _success;

    public TSStatus Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public insertTablets_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new TSStatus();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("insertTablets_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("insertTablets_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class insertRecords_args : TBase
  {
    private TSInsertRecordsReq _req;

    public TSInsertRecordsReq Req
    {
      get
      {
        return _req;
      }
      set
      {
        __isset.req = true;
        this._req = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool req;
    }

    public insertRecords_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Req = new TSInsertRecordsReq();
                Req.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("insertRecords_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Req != null && __isset.req) {
          field.Name = "req";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Req.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("insertRecords_args(");
      bool __first = true;
      if (Req != null && __isset.req) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Req: ");
        __sb.Append(Req== null ? "<null>" : Req.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class insertRecords_result : TBase
  {
    private TSStatus _success;

    public TSStatus Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public insertRecords_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new TSStatus();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("insertRecords_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("insertRecords_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class insertRecordsOfOneDevice_args : TBase
  {
    private TSInsertRecordsOfOneDeviceReq _req;

    public TSInsertRecordsOfOneDeviceReq Req
    {
      get
      {
        return _req;
      }
      set
      {
        __isset.req = true;
        this._req = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool req;
    }

    public insertRecordsOfOneDevice_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Req = new TSInsertRecordsOfOneDeviceReq();
                Req.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("insertRecordsOfOneDevice_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Req != null && __isset.req) {
          field.Name = "req";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Req.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("insertRecordsOfOneDevice_args(");
      bool __first = true;
      if (Req != null && __isset.req) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Req: ");
        __sb.Append(Req== null ? "<null>" : Req.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class insertRecordsOfOneDevice_result : TBase
  {
    private TSStatus _success;

    public TSStatus Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public insertRecordsOfOneDevice_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new TSStatus();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("insertRecordsOfOneDevice_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("insertRecordsOfOneDevice_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class insertStringRecords_args : TBase
  {
    private TSInsertStringRecordsReq _req;

    public TSInsertStringRecordsReq Req
    {
      get
      {
        return _req;
      }
      set
      {
        __isset.req = true;
        this._req = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool req;
    }

    public insertStringRecords_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Req = new TSInsertStringRecordsReq();
                Req.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("insertStringRecords_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Req != null && __isset.req) {
          field.Name = "req";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Req.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("insertStringRecords_args(");
      bool __first = true;
      if (Req != null && __isset.req) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Req: ");
        __sb.Append(Req== null ? "<null>" : Req.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class insertStringRecords_result : TBase
  {
    private TSStatus _success;

    public TSStatus Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public insertStringRecords_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new TSStatus();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("insertStringRecords_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("insertStringRecords_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class testInsertTablet_args : TBase
  {
    private TSInsertTabletReq _req;

    public TSInsertTabletReq Req
    {
      get
      {
        return _req;
      }
      set
      {
        __isset.req = true;
        this._req = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool req;
    }

    public testInsertTablet_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Req = new TSInsertTabletReq();
                Req.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("testInsertTablet_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Req != null && __isset.req) {
          field.Name = "req";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Req.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("testInsertTablet_args(");
      bool __first = true;
      if (Req != null && __isset.req) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Req: ");
        __sb.Append(Req== null ? "<null>" : Req.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class testInsertTablet_result : TBase
  {
    private TSStatus _success;

    public TSStatus Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public testInsertTablet_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new TSStatus();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("testInsertTablet_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("testInsertTablet_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class testInsertTablets_args : TBase
  {
    private TSInsertTabletsReq _req;

    public TSInsertTabletsReq Req
    {
      get
      {
        return _req;
      }
      set
      {
        __isset.req = true;
        this._req = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool req;
    }

    public testInsertTablets_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Req = new TSInsertTabletsReq();
                Req.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("testInsertTablets_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Req != null && __isset.req) {
          field.Name = "req";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Req.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("testInsertTablets_args(");
      bool __first = true;
      if (Req != null && __isset.req) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Req: ");
        __sb.Append(Req== null ? "<null>" : Req.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class testInsertTablets_result : TBase
  {
    private TSStatus _success;

    public TSStatus Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public testInsertTablets_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new TSStatus();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("testInsertTablets_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("testInsertTablets_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class testInsertRecord_args : TBase
  {
    private TSInsertRecordReq _req;

    public TSInsertRecordReq Req
    {
      get
      {
        return _req;
      }
      set
      {
        __isset.req = true;
        this._req = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool req;
    }

    public testInsertRecord_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Req = new TSInsertRecordReq();
                Req.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("testInsertRecord_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Req != null && __isset.req) {
          field.Name = "req";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Req.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("testInsertRecord_args(");
      bool __first = true;
      if (Req != null && __isset.req) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Req: ");
        __sb.Append(Req== null ? "<null>" : Req.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class testInsertRecord_result : TBase
  {
    private TSStatus _success;

    public TSStatus Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public testInsertRecord_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new TSStatus();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("testInsertRecord_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("testInsertRecord_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class testInsertStringRecord_args : TBase
  {
    private TSInsertStringRecordReq _req;

    public TSInsertStringRecordReq Req
    {
      get
      {
        return _req;
      }
      set
      {
        __isset.req = true;
        this._req = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool req;
    }

    public testInsertStringRecord_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Req = new TSInsertStringRecordReq();
                Req.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("testInsertStringRecord_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Req != null && __isset.req) {
          field.Name = "req";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Req.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("testInsertStringRecord_args(");
      bool __first = true;
      if (Req != null && __isset.req) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Req: ");
        __sb.Append(Req== null ? "<null>" : Req.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class testInsertStringRecord_result : TBase
  {
    private TSStatus _success;

    public TSStatus Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public testInsertStringRecord_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new TSStatus();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("testInsertStringRecord_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("testInsertStringRecord_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class testInsertRecords_args : TBase
  {
    private TSInsertRecordsReq _req;

    public TSInsertRecordsReq Req
    {
      get
      {
        return _req;
      }
      set
      {
        __isset.req = true;
        this._req = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool req;
    }

    public testInsertRecords_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Req = new TSInsertRecordsReq();
                Req.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("testInsertRecords_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Req != null && __isset.req) {
          field.Name = "req";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Req.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("testInsertRecords_args(");
      bool __first = true;
      if (Req != null && __isset.req) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Req: ");
        __sb.Append(Req== null ? "<null>" : Req.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class testInsertRecords_result : TBase
  {
    private TSStatus _success;

    public TSStatus Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public testInsertRecords_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new TSStatus();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("testInsertRecords_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("testInsertRecords_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class testInsertRecordsOfOneDevice_args : TBase
  {
    private TSInsertRecordsOfOneDeviceReq _req;

    public TSInsertRecordsOfOneDeviceReq Req
    {
      get
      {
        return _req;
      }
      set
      {
        __isset.req = true;
        this._req = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool req;
    }

    public testInsertRecordsOfOneDevice_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Req = new TSInsertRecordsOfOneDeviceReq();
                Req.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("testInsertRecordsOfOneDevice_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Req != null && __isset.req) {
          field.Name = "req";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Req.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("testInsertRecordsOfOneDevice_args(");
      bool __first = true;
      if (Req != null && __isset.req) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Req: ");
        __sb.Append(Req== null ? "<null>" : Req.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class testInsertRecordsOfOneDevice_result : TBase
  {
    private TSStatus _success;

    public TSStatus Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public testInsertRecordsOfOneDevice_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new TSStatus();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("testInsertRecordsOfOneDevice_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("testInsertRecordsOfOneDevice_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class testInsertStringRecords_args : TBase
  {
    private TSInsertStringRecordsReq _req;

    public TSInsertStringRecordsReq Req
    {
      get
      {
        return _req;
      }
      set
      {
        __isset.req = true;
        this._req = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool req;
    }

    public testInsertStringRecords_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Req = new TSInsertStringRecordsReq();
                Req.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("testInsertStringRecords_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Req != null && __isset.req) {
          field.Name = "req";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Req.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("testInsertStringRecords_args(");
      bool __first = true;
      if (Req != null && __isset.req) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Req: ");
        __sb.Append(Req== null ? "<null>" : Req.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class testInsertStringRecords_result : TBase
  {
    private TSStatus _success;

    public TSStatus Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public testInsertStringRecords_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new TSStatus();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("testInsertStringRecords_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("testInsertStringRecords_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class deleteData_args : TBase
  {
    private TSDeleteDataReq _req;

    public TSDeleteDataReq Req
    {
      get
      {
        return _req;
      }
      set
      {
        __isset.req = true;
        this._req = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool req;
    }

    public deleteData_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Req = new TSDeleteDataReq();
                Req.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("deleteData_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Req != null && __isset.req) {
          field.Name = "req";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Req.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("deleteData_args(");
      bool __first = true;
      if (Req != null && __isset.req) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Req: ");
        __sb.Append(Req== null ? "<null>" : Req.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class deleteData_result : TBase
  {
    private TSStatus _success;

    public TSStatus Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public deleteData_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new TSStatus();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("deleteData_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("deleteData_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class executeRawDataQuery_args : TBase
  {
    private TSRawDataQueryReq _req;

    public TSRawDataQueryReq Req
    {
      get
      {
        return _req;
      }
      set
      {
        __isset.req = true;
        this._req = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool req;
    }

    public executeRawDataQuery_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Req = new TSRawDataQueryReq();
                Req.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("executeRawDataQuery_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Req != null && __isset.req) {
          field.Name = "req";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Req.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("executeRawDataQuery_args(");
      bool __first = true;
      if (Req != null && __isset.req) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Req: ");
        __sb.Append(Req== null ? "<null>" : Req.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class executeRawDataQuery_result : TBase
  {
    private TSExecuteStatementResp _success;

    public TSExecuteStatementResp Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public executeRawDataQuery_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new TSExecuteStatementResp();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("executeRawDataQuery_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("executeRawDataQuery_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class requestStatementId_args : TBase
  {
    private long _sessionId;

    public long SessionId
    {
      get
      {
        return _sessionId;
      }
      set
      {
        __isset.sessionId = true;
        this._sessionId = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool sessionId;
    }

    public requestStatementId_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                SessionId = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("requestStatementId_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.sessionId) {
          field.Name = "sessionId";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(SessionId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("requestStatementId_args(");
      bool __first = true;
      if (__isset.sessionId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("SessionId: ");
        __sb.Append(SessionId);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class requestStatementId_result : TBase
  {
    private long _success;

    public long Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public requestStatementId_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I64) {
                Success = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("requestStatementId_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I64;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("requestStatementId_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
