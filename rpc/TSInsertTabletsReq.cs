/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;


#if !SILVERLIGHT
[Serializable]
#endif
public partial class TSInsertTabletsReq : TBase
{

  public long SessionId { get; set; }

  public List<string> DeviceIds { get; set; }

  public List<List<string>> MeasurementsList { get; set; }

  public List<byte[]> ValuesList { get; set; }

  public List<byte[]> TimestampsList { get; set; }

  public List<List<int>> TypesList { get; set; }

  public List<int> SizeList { get; set; }

  public TSInsertTabletsReq() {
  }

  public TSInsertTabletsReq(long sessionId, List<string> deviceIds, List<List<string>> measurementsList, List<byte[]> valuesList, List<byte[]> timestampsList, List<List<int>> typesList, List<int> sizeList) : this() {
    this.SessionId = sessionId;
    this.DeviceIds = deviceIds;
    this.MeasurementsList = measurementsList;
    this.ValuesList = valuesList;
    this.TimestampsList = timestampsList;
    this.TypesList = typesList;
    this.SizeList = sizeList;
  }

  public void Read (TProtocol iprot)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      bool isset_sessionId = false;
      bool isset_deviceIds = false;
      bool isset_measurementsList = false;
      bool isset_valuesList = false;
      bool isset_timestampsList = false;
      bool isset_typesList = false;
      bool isset_sizeList = false;
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I64) {
              SessionId = iprot.ReadI64();
              isset_sessionId = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.List) {
              {
                DeviceIds = new List<string>();
                TList _list71 = iprot.ReadListBegin();
                for( int _i72 = 0; _i72 < _list71.Count; ++_i72)
                {
                  string _elem73;
                  _elem73 = iprot.ReadString();
                  DeviceIds.Add(_elem73);
                }
                iprot.ReadListEnd();
              }
              isset_deviceIds = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.List) {
              {
                MeasurementsList = new List<List<string>>();
                TList _list74 = iprot.ReadListBegin();
                for( int _i75 = 0; _i75 < _list74.Count; ++_i75)
                {
                  List<string> _elem76;
                  {
                    _elem76 = new List<string>();
                    TList _list77 = iprot.ReadListBegin();
                    for( int _i78 = 0; _i78 < _list77.Count; ++_i78)
                    {
                      string _elem79;
                      _elem79 = iprot.ReadString();
                      _elem76.Add(_elem79);
                    }
                    iprot.ReadListEnd();
                  }
                  MeasurementsList.Add(_elem76);
                }
                iprot.ReadListEnd();
              }
              isset_measurementsList = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.List) {
              {
                ValuesList = new List<byte[]>();
                TList _list80 = iprot.ReadListBegin();
                for( int _i81 = 0; _i81 < _list80.Count; ++_i81)
                {
                  byte[] _elem82;
                  _elem82 = iprot.ReadBinary();
                  ValuesList.Add(_elem82);
                }
                iprot.ReadListEnd();
              }
              isset_valuesList = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.List) {
              {
                TimestampsList = new List<byte[]>();
                TList _list83 = iprot.ReadListBegin();
                for( int _i84 = 0; _i84 < _list83.Count; ++_i84)
                {
                  byte[] _elem85;
                  _elem85 = iprot.ReadBinary();
                  TimestampsList.Add(_elem85);
                }
                iprot.ReadListEnd();
              }
              isset_timestampsList = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.List) {
              {
                TypesList = new List<List<int>>();
                TList _list86 = iprot.ReadListBegin();
                for( int _i87 = 0; _i87 < _list86.Count; ++_i87)
                {
                  List<int> _elem88;
                  {
                    _elem88 = new List<int>();
                    TList _list89 = iprot.ReadListBegin();
                    for( int _i90 = 0; _i90 < _list89.Count; ++_i90)
                    {
                      int _elem91;
                      _elem91 = iprot.ReadI32();
                      _elem88.Add(_elem91);
                    }
                    iprot.ReadListEnd();
                  }
                  TypesList.Add(_elem88);
                }
                iprot.ReadListEnd();
              }
              isset_typesList = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.List) {
              {
                SizeList = new List<int>();
                TList _list92 = iprot.ReadListBegin();
                for( int _i93 = 0; _i93 < _list92.Count; ++_i93)
                {
                  int _elem94;
                  _elem94 = iprot.ReadI32();
                  SizeList.Add(_elem94);
                }
                iprot.ReadListEnd();
              }
              isset_sizeList = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
      if (!isset_sessionId)
        throw new TProtocolException(TProtocolException.INVALID_DATA, "required field SessionId not set");
      if (!isset_deviceIds)
        throw new TProtocolException(TProtocolException.INVALID_DATA, "required field DeviceIds not set");
      if (!isset_measurementsList)
        throw new TProtocolException(TProtocolException.INVALID_DATA, "required field MeasurementsList not set");
      if (!isset_valuesList)
        throw new TProtocolException(TProtocolException.INVALID_DATA, "required field ValuesList not set");
      if (!isset_timestampsList)
        throw new TProtocolException(TProtocolException.INVALID_DATA, "required field TimestampsList not set");
      if (!isset_typesList)
        throw new TProtocolException(TProtocolException.INVALID_DATA, "required field TypesList not set");
      if (!isset_sizeList)
        throw new TProtocolException(TProtocolException.INVALID_DATA, "required field SizeList not set");
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public void Write(TProtocol oprot) {
    oprot.IncrementRecursionDepth();
    try
    {
      TStruct struc = new TStruct("TSInsertTabletsReq");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      field.Name = "sessionId";
      field.Type = TType.I64;
      field.ID = 1;
      oprot.WriteFieldBegin(field);
      oprot.WriteI64(SessionId);
      oprot.WriteFieldEnd();
      if (DeviceIds == null)
        throw new TProtocolException(TProtocolException.INVALID_DATA, "required field DeviceIds not set");
      field.Name = "deviceIds";
      field.Type = TType.List;
      field.ID = 2;
      oprot.WriteFieldBegin(field);
      {
        oprot.WriteListBegin(new TList(TType.String, DeviceIds.Count));
        foreach (string _iter95 in DeviceIds)
        {
          oprot.WriteString(_iter95);
        }
        oprot.WriteListEnd();
      }
      oprot.WriteFieldEnd();
      if (MeasurementsList == null)
        throw new TProtocolException(TProtocolException.INVALID_DATA, "required field MeasurementsList not set");
      field.Name = "measurementsList";
      field.Type = TType.List;
      field.ID = 3;
      oprot.WriteFieldBegin(field);
      {
        oprot.WriteListBegin(new TList(TType.List, MeasurementsList.Count));
        foreach (List<string> _iter96 in MeasurementsList)
        {
          {
            oprot.WriteListBegin(new TList(TType.String, _iter96.Count));
            foreach (string _iter97 in _iter96)
            {
              oprot.WriteString(_iter97);
            }
            oprot.WriteListEnd();
          }
        }
        oprot.WriteListEnd();
      }
      oprot.WriteFieldEnd();
      if (ValuesList == null)
        throw new TProtocolException(TProtocolException.INVALID_DATA, "required field ValuesList not set");
      field.Name = "valuesList";
      field.Type = TType.List;
      field.ID = 4;
      oprot.WriteFieldBegin(field);
      {
        oprot.WriteListBegin(new TList(TType.String, ValuesList.Count));
        foreach (byte[] _iter98 in ValuesList)
        {
          oprot.WriteBinary(_iter98);
        }
        oprot.WriteListEnd();
      }
      oprot.WriteFieldEnd();
      if (TimestampsList == null)
        throw new TProtocolException(TProtocolException.INVALID_DATA, "required field TimestampsList not set");
      field.Name = "timestampsList";
      field.Type = TType.List;
      field.ID = 5;
      oprot.WriteFieldBegin(field);
      {
        oprot.WriteListBegin(new TList(TType.String, TimestampsList.Count));
        foreach (byte[] _iter99 in TimestampsList)
        {
          oprot.WriteBinary(_iter99);
        }
        oprot.WriteListEnd();
      }
      oprot.WriteFieldEnd();
      if (TypesList == null)
        throw new TProtocolException(TProtocolException.INVALID_DATA, "required field TypesList not set");
      field.Name = "typesList";
      field.Type = TType.List;
      field.ID = 6;
      oprot.WriteFieldBegin(field);
      {
        oprot.WriteListBegin(new TList(TType.List, TypesList.Count));
        foreach (List<int> _iter100 in TypesList)
        {
          {
            oprot.WriteListBegin(new TList(TType.I32, _iter100.Count));
            foreach (int _iter101 in _iter100)
            {
              oprot.WriteI32(_iter101);
            }
            oprot.WriteListEnd();
          }
        }
        oprot.WriteListEnd();
      }
      oprot.WriteFieldEnd();
      if (SizeList == null)
        throw new TProtocolException(TProtocolException.INVALID_DATA, "required field SizeList not set");
      field.Name = "sizeList";
      field.Type = TType.List;
      field.ID = 7;
      oprot.WriteFieldBegin(field);
      {
        oprot.WriteListBegin(new TList(TType.I32, SizeList.Count));
        foreach (int _iter102 in SizeList)
        {
          oprot.WriteI32(_iter102);
        }
        oprot.WriteListEnd();
      }
      oprot.WriteFieldEnd();
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override string ToString() {
    StringBuilder __sb = new StringBuilder("TSInsertTabletsReq(");
    __sb.Append(", SessionId: ");
    __sb.Append(SessionId);
    __sb.Append(", DeviceIds: ");
    __sb.Append(DeviceIds);
    __sb.Append(", MeasurementsList: ");
    __sb.Append(MeasurementsList);
    __sb.Append(", ValuesList: ");
    __sb.Append(ValuesList);
    __sb.Append(", TimestampsList: ");
    __sb.Append(TimestampsList);
    __sb.Append(", TypesList: ");
    __sb.Append(TypesList);
    __sb.Append(", SizeList: ");
    __sb.Append(SizeList);
    __sb.Append(")");
    return __sb.ToString();
  }

}

