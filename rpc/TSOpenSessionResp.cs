/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;


#if !SILVERLIGHT
[Serializable]
#endif
public partial class TSOpenSessionResp : TBase
{
  private long _sessionId;
  private Dictionary<string, string> _configuration;

  public TSStatus Status { get; set; }

  /// <summary>
  /// 
  /// <seealso cref="TSProtocolVersion"/>
  /// </summary>
  public TSProtocolVersion ServerProtocolVersion { get; set; }

  public long SessionId
  {
    get
    {
      return _sessionId;
    }
    set
    {
      __isset.sessionId = true;
      this._sessionId = value;
    }
  }

  public Dictionary<string, string> Configuration
  {
    get
    {
      return _configuration;
    }
    set
    {
      __isset.configuration = true;
      this._configuration = value;
    }
  }


  public Isset __isset;
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public struct Isset {
    public bool sessionId;
    public bool configuration;
  }

  public TSOpenSessionResp() {
    this.ServerProtocolVersion = TSProtocolVersion.IOTDB_SERVICE_PROTOCOL_V1;
  }

  public TSOpenSessionResp(TSStatus status, TSProtocolVersion serverProtocolVersion) : this() {
    this.Status = status;
    this.ServerProtocolVersion = serverProtocolVersion;
  }

  public void Read (TProtocol iprot)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      bool isset_status = false;
      bool isset_serverProtocolVersion = false;
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Struct) {
              Status = new TSStatus();
              Status.Read(iprot);
              isset_status = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              ServerProtocolVersion = (TSProtocolVersion)iprot.ReadI32();
              isset_serverProtocolVersion = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I64) {
              SessionId = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.Map) {
              {
                Configuration = new Dictionary<string, string>();
                TMap _map33 = iprot.ReadMapBegin();
                for( int _i34 = 0; _i34 < _map33.Count; ++_i34)
                {
                  string _key35;
                  string _val36;
                  _key35 = iprot.ReadString();
                  _val36 = iprot.ReadString();
                  Configuration[_key35] = _val36;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
      if (!isset_status)
        throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Status not set");
      if (!isset_serverProtocolVersion)
        throw new TProtocolException(TProtocolException.INVALID_DATA, "required field ServerProtocolVersion not set");
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public void Write(TProtocol oprot) {
    oprot.IncrementRecursionDepth();
    try
    {
      TStruct struc = new TStruct("TSOpenSessionResp");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Status == null)
        throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Status not set");
      field.Name = "status";
      field.Type = TType.Struct;
      field.ID = 1;
      oprot.WriteFieldBegin(field);
      Status.Write(oprot);
      oprot.WriteFieldEnd();
      field.Name = "serverProtocolVersion";
      field.Type = TType.I32;
      field.ID = 2;
      oprot.WriteFieldBegin(field);
      oprot.WriteI32((int)ServerProtocolVersion);
      oprot.WriteFieldEnd();
      if (__isset.sessionId) {
        field.Name = "sessionId";
        field.Type = TType.I64;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(SessionId);
        oprot.WriteFieldEnd();
      }
      if (Configuration != null && __isset.configuration) {
        field.Name = "configuration";
        field.Type = TType.Map;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.String, TType.String, Configuration.Count));
          foreach (string _iter37 in Configuration.Keys)
          {
            oprot.WriteString(_iter37);
            oprot.WriteString(Configuration[_iter37]);
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override string ToString() {
    StringBuilder __sb = new StringBuilder("TSOpenSessionResp(");
    __sb.Append(", Status: ");
    __sb.Append(Status== null ? "<null>" : Status.ToString());
    __sb.Append(", ServerProtocolVersion: ");
    __sb.Append(ServerProtocolVersion);
    if (__isset.sessionId) {
      __sb.Append(", SessionId: ");
      __sb.Append(SessionId);
    }
    if (Configuration != null && __isset.configuration) {
      __sb.Append(", Configuration: ");
      __sb.Append(Configuration);
    }
    __sb.Append(")");
    return __sb.ToString();
  }

}

