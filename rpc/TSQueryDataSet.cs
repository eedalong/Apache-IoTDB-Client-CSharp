/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;


#if !SILVERLIGHT
[Serializable]
#endif
public partial class TSQueryDataSet : TBase
{

  public byte[] Time { get; set; }

  public List<byte[]> ValueList { get; set; }

  public List<byte[]> BitmapList { get; set; }

  public TSQueryDataSet() {
  }

  public TSQueryDataSet(byte[] time, List<byte[]> valueList, List<byte[]> bitmapList) : this() {
    this.Time = time;
    this.ValueList = valueList;
    this.BitmapList = bitmapList;
  }

  public void Read (TProtocol iprot)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      bool isset_time = false;
      bool isset_valueList = false;
      bool isset_bitmapList = false;
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              Time = iprot.ReadBinary();
              isset_time = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.List) {
              {
                ValueList = new List<byte[]>();
                TList _list4 = iprot.ReadListBegin();
                for( int _i5 = 0; _i5 < _list4.Count; ++_i5)
                {
                  byte[] _elem6;
                  _elem6 = iprot.ReadBinary();
                  ValueList.Add(_elem6);
                }
                iprot.ReadListEnd();
              }
              isset_valueList = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.List) {
              {
                BitmapList = new List<byte[]>();
                TList _list7 = iprot.ReadListBegin();
                for( int _i8 = 0; _i8 < _list7.Count; ++_i8)
                {
                  byte[] _elem9;
                  _elem9 = iprot.ReadBinary();
                  BitmapList.Add(_elem9);
                }
                iprot.ReadListEnd();
              }
              isset_bitmapList = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
      if (!isset_time)
        throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Time not set");
      if (!isset_valueList)
        throw new TProtocolException(TProtocolException.INVALID_DATA, "required field ValueList not set");
      if (!isset_bitmapList)
        throw new TProtocolException(TProtocolException.INVALID_DATA, "required field BitmapList not set");
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public void Write(TProtocol oprot) {
    oprot.IncrementRecursionDepth();
    try
    {
      TStruct struc = new TStruct("TSQueryDataSet");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Time == null)
        throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Time not set");
      field.Name = "time";
      field.Type = TType.String;
      field.ID = 1;
      oprot.WriteFieldBegin(field);
      oprot.WriteBinary(Time);
      oprot.WriteFieldEnd();
      if (ValueList == null)
        throw new TProtocolException(TProtocolException.INVALID_DATA, "required field ValueList not set");
      field.Name = "valueList";
      field.Type = TType.List;
      field.ID = 2;
      oprot.WriteFieldBegin(field);
      {
        oprot.WriteListBegin(new TList(TType.String, ValueList.Count));
        foreach (byte[] _iter10 in ValueList)
        {
          oprot.WriteBinary(_iter10);
        }
        oprot.WriteListEnd();
      }
      oprot.WriteFieldEnd();
      if (BitmapList == null)
        throw new TProtocolException(TProtocolException.INVALID_DATA, "required field BitmapList not set");
      field.Name = "bitmapList";
      field.Type = TType.List;
      field.ID = 3;
      oprot.WriteFieldBegin(field);
      {
        oprot.WriteListBegin(new TList(TType.String, BitmapList.Count));
        foreach (byte[] _iter11 in BitmapList)
        {
          oprot.WriteBinary(_iter11);
        }
        oprot.WriteListEnd();
      }
      oprot.WriteFieldEnd();
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override string ToString() {
    StringBuilder __sb = new StringBuilder("TSQueryDataSet(");
    __sb.Append(", Time: ");
    __sb.Append(Time);
    __sb.Append(", ValueList: ");
    __sb.Append(ValueList);
    __sb.Append(", BitmapList: ");
    __sb.Append(BitmapList);
    __sb.Append(")");
    return __sb.ToString();
  }

}

