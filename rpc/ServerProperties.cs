/**
 * Autogenerated by Thrift Compiler (0.14.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling


public partial class ServerProperties : TBase
{

  public string Version { get; set; }

  public List<string> SupportedTimeAggregationOperations { get; set; }

  public string TimestampPrecision { get; set; }

  public ServerProperties()
  {
  }

  public ServerProperties(string version, List<string> supportedTimeAggregationOperations, string timestampPrecision) : this()
  {
    this.Version = version;
    this.SupportedTimeAggregationOperations = supportedTimeAggregationOperations;
    this.TimestampPrecision = timestampPrecision;
  }

  public ServerProperties DeepCopy()
  {
    var tmp293 = new ServerProperties();
    if((Version != null))
    {
      tmp293.Version = this.Version;
    }
    if((SupportedTimeAggregationOperations != null))
    {
      tmp293.SupportedTimeAggregationOperations = this.SupportedTimeAggregationOperations.DeepCopy();
    }
    if((TimestampPrecision != null))
    {
      tmp293.TimestampPrecision = this.TimestampPrecision;
    }
    return tmp293;
  }

  public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      bool isset_version = false;
      bool isset_supportedTimeAggregationOperations = false;
      bool isset_timestampPrecision = false;
      TField field;
      await iprot.ReadStructBeginAsync(cancellationToken);
      while (true)
      {
        field = await iprot.ReadFieldBeginAsync(cancellationToken);
        if (field.Type == TType.Stop)
        {
          break;
        }

        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String)
            {
              Version = await iprot.ReadStringAsync(cancellationToken);
              isset_version = true;
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 2:
            if (field.Type == TType.List)
            {
              {
                TList _list294 = await iprot.ReadListBeginAsync(cancellationToken);
                SupportedTimeAggregationOperations = new List<string>(_list294.Count);
                for(int _i295 = 0; _i295 < _list294.Count; ++_i295)
                {
                  string _elem296;
                  _elem296 = await iprot.ReadStringAsync(cancellationToken);
                  SupportedTimeAggregationOperations.Add(_elem296);
                }
                await iprot.ReadListEndAsync(cancellationToken);
              }
              isset_supportedTimeAggregationOperations = true;
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 3:
            if (field.Type == TType.String)
            {
              TimestampPrecision = await iprot.ReadStringAsync(cancellationToken);
              isset_timestampPrecision = true;
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          default: 
            await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            break;
        }

        await iprot.ReadFieldEndAsync(cancellationToken);
      }

      await iprot.ReadStructEndAsync(cancellationToken);
      if (!isset_version)
      {
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      }
      if (!isset_supportedTimeAggregationOperations)
      {
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      }
      if (!isset_timestampPrecision)
      {
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      }
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
  {
    oprot.IncrementRecursionDepth();
    try
    {
      var struc = new TStruct("ServerProperties");
      await oprot.WriteStructBeginAsync(struc, cancellationToken);
      var field = new TField();
      if((Version != null))
      {
        field.Name = "version";
        field.Type = TType.String;
        field.ID = 1;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(Version, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if((SupportedTimeAggregationOperations != null))
      {
        field.Name = "supportedTimeAggregationOperations";
        field.Type = TType.List;
        field.ID = 2;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        {
          await oprot.WriteListBeginAsync(new TList(TType.String, SupportedTimeAggregationOperations.Count), cancellationToken);
          foreach (string _iter297 in SupportedTimeAggregationOperations)
          {
            await oprot.WriteStringAsync(_iter297, cancellationToken);
          }
          await oprot.WriteListEndAsync(cancellationToken);
        }
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if((TimestampPrecision != null))
      {
        field.Name = "timestampPrecision";
        field.Type = TType.String;
        field.ID = 3;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(TimestampPrecision, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      await oprot.WriteFieldStopAsync(cancellationToken);
      await oprot.WriteStructEndAsync(cancellationToken);
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override bool Equals(object that)
  {
    if (!(that is ServerProperties other)) return false;
    if (ReferenceEquals(this, other)) return true;
    return System.Object.Equals(Version, other.Version)
      && TCollections.Equals(SupportedTimeAggregationOperations, other.SupportedTimeAggregationOperations)
      && System.Object.Equals(TimestampPrecision, other.TimestampPrecision);
  }

  public override int GetHashCode() {
    int hashcode = 157;
    unchecked {
      if((Version != null))
      {
        hashcode = (hashcode * 397) + Version.GetHashCode();
      }
      if((SupportedTimeAggregationOperations != null))
      {
        hashcode = (hashcode * 397) + TCollections.GetHashCode(SupportedTimeAggregationOperations);
      }
      if((TimestampPrecision != null))
      {
        hashcode = (hashcode * 397) + TimestampPrecision.GetHashCode();
      }
    }
    return hashcode;
  }

  public override string ToString()
  {
    var sb = new StringBuilder("ServerProperties(");
    if((Version != null))
    {
      sb.Append(", Version: ");
      Version.ToString(sb);
    }
    if((SupportedTimeAggregationOperations != null))
    {
      sb.Append(", SupportedTimeAggregationOperations: ");
      SupportedTimeAggregationOperations.ToString(sb);
    }
    if((TimestampPrecision != null))
    {
      sb.Append(", TimestampPrecision: ");
      TimestampPrecision.ToString(sb);
    }
    sb.Append(')');
    return sb.ToString();
  }
}

