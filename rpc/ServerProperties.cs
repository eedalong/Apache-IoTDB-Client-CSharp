/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;


#if !SILVERLIGHT
[Serializable]
#endif
public partial class ServerProperties : TBase
{

  public string Version { get; set; }

  public List<string> SupportedTimeAggregationOperations { get; set; }

  public string TimestampPrecision { get; set; }

  public ServerProperties() {
  }

  public ServerProperties(string version, List<string> supportedTimeAggregationOperations, string timestampPrecision) : this() {
    this.Version = version;
    this.SupportedTimeAggregationOperations = supportedTimeAggregationOperations;
    this.TimestampPrecision = timestampPrecision;
  }

  public void Read (TProtocol iprot)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      bool isset_version = false;
      bool isset_supportedTimeAggregationOperations = false;
      bool isset_timestampPrecision = false;
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              Version = iprot.ReadString();
              isset_version = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.List) {
              {
                SupportedTimeAggregationOperations = new List<string>();
                TList _list233 = iprot.ReadListBegin();
                for( int _i234 = 0; _i234 < _list233.Count; ++_i234)
                {
                  string _elem235;
                  _elem235 = iprot.ReadString();
                  SupportedTimeAggregationOperations.Add(_elem235);
                }
                iprot.ReadListEnd();
              }
              isset_supportedTimeAggregationOperations = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              TimestampPrecision = iprot.ReadString();
              isset_timestampPrecision = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
      if (!isset_version)
        throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Version not set");
      if (!isset_supportedTimeAggregationOperations)
        throw new TProtocolException(TProtocolException.INVALID_DATA, "required field SupportedTimeAggregationOperations not set");
      if (!isset_timestampPrecision)
        throw new TProtocolException(TProtocolException.INVALID_DATA, "required field TimestampPrecision not set");
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public void Write(TProtocol oprot) {
    oprot.IncrementRecursionDepth();
    try
    {
      TStruct struc = new TStruct("ServerProperties");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Version == null)
        throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Version not set");
      field.Name = "version";
      field.Type = TType.String;
      field.ID = 1;
      oprot.WriteFieldBegin(field);
      oprot.WriteString(Version);
      oprot.WriteFieldEnd();
      if (SupportedTimeAggregationOperations == null)
        throw new TProtocolException(TProtocolException.INVALID_DATA, "required field SupportedTimeAggregationOperations not set");
      field.Name = "supportedTimeAggregationOperations";
      field.Type = TType.List;
      field.ID = 2;
      oprot.WriteFieldBegin(field);
      {
        oprot.WriteListBegin(new TList(TType.String, SupportedTimeAggregationOperations.Count));
        foreach (string _iter236 in SupportedTimeAggregationOperations)
        {
          oprot.WriteString(_iter236);
        }
        oprot.WriteListEnd();
      }
      oprot.WriteFieldEnd();
      if (TimestampPrecision == null)
        throw new TProtocolException(TProtocolException.INVALID_DATA, "required field TimestampPrecision not set");
      field.Name = "timestampPrecision";
      field.Type = TType.String;
      field.ID = 3;
      oprot.WriteFieldBegin(field);
      oprot.WriteString(TimestampPrecision);
      oprot.WriteFieldEnd();
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override string ToString() {
    StringBuilder __sb = new StringBuilder("ServerProperties(");
    __sb.Append(", Version: ");
    __sb.Append(Version);
    __sb.Append(", SupportedTimeAggregationOperations: ");
    __sb.Append(SupportedTimeAggregationOperations);
    __sb.Append(", TimestampPrecision: ");
    __sb.Append(TimestampPrecision);
    __sb.Append(")");
    return __sb.ToString();
  }

}

