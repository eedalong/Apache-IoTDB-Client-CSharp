/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;


#if !SILVERLIGHT
[Serializable]
#endif
public partial class TSFetchMetadataResp : TBase
{
  private string _metadataInJson;
  private List<string> _columnsList;
  private string _dataType;

  public TSStatus Status { get; set; }

  public string MetadataInJson
  {
    get
    {
      return _metadataInJson;
    }
    set
    {
      __isset.metadataInJson = true;
      this._metadataInJson = value;
    }
  }

  public List<string> ColumnsList
  {
    get
    {
      return _columnsList;
    }
    set
    {
      __isset.columnsList = true;
      this._columnsList = value;
    }
  }

  public string DataType
  {
    get
    {
      return _dataType;
    }
    set
    {
      __isset.dataType = true;
      this._dataType = value;
    }
  }


  public Isset __isset;
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public struct Isset {
    public bool metadataInJson;
    public bool columnsList;
    public bool dataType;
  }

  public TSFetchMetadataResp() {
  }

  public TSFetchMetadataResp(TSStatus status) : this() {
    this.Status = status;
  }

  public void Read (TProtocol iprot)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      bool isset_status = false;
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Struct) {
              Status = new TSStatus();
              Status.Read(iprot);
              isset_status = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              MetadataInJson = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.List) {
              {
                ColumnsList = new List<string>();
                TList _list47 = iprot.ReadListBegin();
                for( int _i48 = 0; _i48 < _list47.Count; ++_i48)
                {
                  string _elem49;
                  _elem49 = iprot.ReadString();
                  ColumnsList.Add(_elem49);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.String) {
              DataType = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
      if (!isset_status)
        throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Status not set");
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public void Write(TProtocol oprot) {
    oprot.IncrementRecursionDepth();
    try
    {
      TStruct struc = new TStruct("TSFetchMetadataResp");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Status == null)
        throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Status not set");
      field.Name = "status";
      field.Type = TType.Struct;
      field.ID = 1;
      oprot.WriteFieldBegin(field);
      Status.Write(oprot);
      oprot.WriteFieldEnd();
      if (MetadataInJson != null && __isset.metadataInJson) {
        field.Name = "metadataInJson";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(MetadataInJson);
        oprot.WriteFieldEnd();
      }
      if (ColumnsList != null && __isset.columnsList) {
        field.Name = "columnsList";
        field.Type = TType.List;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.String, ColumnsList.Count));
          foreach (string _iter50 in ColumnsList)
          {
            oprot.WriteString(_iter50);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (DataType != null && __isset.dataType) {
        field.Name = "dataType";
        field.Type = TType.String;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(DataType);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override string ToString() {
    StringBuilder __sb = new StringBuilder("TSFetchMetadataResp(");
    __sb.Append(", Status: ");
    __sb.Append(Status== null ? "<null>" : Status.ToString());
    if (MetadataInJson != null && __isset.metadataInJson) {
      __sb.Append(", MetadataInJson: ");
      __sb.Append(MetadataInJson);
    }
    if (ColumnsList != null && __isset.columnsList) {
      __sb.Append(", ColumnsList: ");
      __sb.Append(ColumnsList);
    }
    if (DataType != null && __isset.dataType) {
      __sb.Append(", DataType: ");
      __sb.Append(DataType);
    }
    __sb.Append(")");
    return __sb.ToString();
  }

}

