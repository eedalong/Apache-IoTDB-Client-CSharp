/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;


#if !SILVERLIGHT
[Serializable]
#endif
public partial class TSCreateTimeseriesReq : TBase
{
  private Dictionary<string, string> _props;
  private Dictionary<string, string> _tags;
  private Dictionary<string, string> _attributes;
  private string _measurementAlias;

  public long SessionId { get; set; }

  public string Path { get; set; }

  public int DataType { get; set; }

  public int Encoding { get; set; }

  public int Compressor { get; set; }

  public Dictionary<string, string> Props
  {
    get
    {
      return _props;
    }
    set
    {
      __isset.props = true;
      this._props = value;
    }
  }

  public Dictionary<string, string> Tags
  {
    get
    {
      return _tags;
    }
    set
    {
      __isset.tags = true;
      this._tags = value;
    }
  }

  public Dictionary<string, string> Attributes
  {
    get
    {
      return _attributes;
    }
    set
    {
      __isset.attributes = true;
      this._attributes = value;
    }
  }

  public string MeasurementAlias
  {
    get
    {
      return _measurementAlias;
    }
    set
    {
      __isset.measurementAlias = true;
      this._measurementAlias = value;
    }
  }


  public Isset __isset;
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public struct Isset {
    public bool props;
    public bool tags;
    public bool attributes;
    public bool measurementAlias;
  }

  public TSCreateTimeseriesReq() {
  }

  public TSCreateTimeseriesReq(long sessionId, string path, int dataType, int encoding, int compressor) : this() {
    this.SessionId = sessionId;
    this.Path = path;
    this.DataType = dataType;
    this.Encoding = encoding;
    this.Compressor = compressor;
  }

  public void Read (TProtocol iprot)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      bool isset_sessionId = false;
      bool isset_path = false;
      bool isset_dataType = false;
      bool isset_encoding = false;
      bool isset_compressor = false;
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I64) {
              SessionId = iprot.ReadI64();
              isset_sessionId = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              Path = iprot.ReadString();
              isset_path = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I32) {
              DataType = iprot.ReadI32();
              isset_dataType = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I32) {
              Encoding = iprot.ReadI32();
              isset_encoding = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.I32) {
              Compressor = iprot.ReadI32();
              isset_compressor = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.Map) {
              {
                Props = new Dictionary<string, string>();
                TMap _map167 = iprot.ReadMapBegin();
                for( int _i168 = 0; _i168 < _map167.Count; ++_i168)
                {
                  string _key169;
                  string _val170;
                  _key169 = iprot.ReadString();
                  _val170 = iprot.ReadString();
                  Props[_key169] = _val170;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.Map) {
              {
                Tags = new Dictionary<string, string>();
                TMap _map171 = iprot.ReadMapBegin();
                for( int _i172 = 0; _i172 < _map171.Count; ++_i172)
                {
                  string _key173;
                  string _val174;
                  _key173 = iprot.ReadString();
                  _val174 = iprot.ReadString();
                  Tags[_key173] = _val174;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.Map) {
              {
                Attributes = new Dictionary<string, string>();
                TMap _map175 = iprot.ReadMapBegin();
                for( int _i176 = 0; _i176 < _map175.Count; ++_i176)
                {
                  string _key177;
                  string _val178;
                  _key177 = iprot.ReadString();
                  _val178 = iprot.ReadString();
                  Attributes[_key177] = _val178;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.String) {
              MeasurementAlias = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
      if (!isset_sessionId)
        throw new TProtocolException(TProtocolException.INVALID_DATA, "required field SessionId not set");
      if (!isset_path)
        throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Path not set");
      if (!isset_dataType)
        throw new TProtocolException(TProtocolException.INVALID_DATA, "required field DataType not set");
      if (!isset_encoding)
        throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Encoding not set");
      if (!isset_compressor)
        throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Compressor not set");
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public void Write(TProtocol oprot) {
    oprot.IncrementRecursionDepth();
    try
    {
      TStruct struc = new TStruct("TSCreateTimeseriesReq");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      field.Name = "sessionId";
      field.Type = TType.I64;
      field.ID = 1;
      oprot.WriteFieldBegin(field);
      oprot.WriteI64(SessionId);
      oprot.WriteFieldEnd();
      if (Path == null)
        throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Path not set");
      field.Name = "path";
      field.Type = TType.String;
      field.ID = 2;
      oprot.WriteFieldBegin(field);
      oprot.WriteString(Path);
      oprot.WriteFieldEnd();
      field.Name = "dataType";
      field.Type = TType.I32;
      field.ID = 3;
      oprot.WriteFieldBegin(field);
      oprot.WriteI32(DataType);
      oprot.WriteFieldEnd();
      field.Name = "encoding";
      field.Type = TType.I32;
      field.ID = 4;
      oprot.WriteFieldBegin(field);
      oprot.WriteI32(Encoding);
      oprot.WriteFieldEnd();
      field.Name = "compressor";
      field.Type = TType.I32;
      field.ID = 5;
      oprot.WriteFieldBegin(field);
      oprot.WriteI32(Compressor);
      oprot.WriteFieldEnd();
      if (Props != null && __isset.props) {
        field.Name = "props";
        field.Type = TType.Map;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.String, TType.String, Props.Count));
          foreach (string _iter179 in Props.Keys)
          {
            oprot.WriteString(_iter179);
            oprot.WriteString(Props[_iter179]);
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (Tags != null && __isset.tags) {
        field.Name = "tags";
        field.Type = TType.Map;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.String, TType.String, Tags.Count));
          foreach (string _iter180 in Tags.Keys)
          {
            oprot.WriteString(_iter180);
            oprot.WriteString(Tags[_iter180]);
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (Attributes != null && __isset.attributes) {
        field.Name = "attributes";
        field.Type = TType.Map;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.String, TType.String, Attributes.Count));
          foreach (string _iter181 in Attributes.Keys)
          {
            oprot.WriteString(_iter181);
            oprot.WriteString(Attributes[_iter181]);
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (MeasurementAlias != null && __isset.measurementAlias) {
        field.Name = "measurementAlias";
        field.Type = TType.String;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(MeasurementAlias);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override string ToString() {
    StringBuilder __sb = new StringBuilder("TSCreateTimeseriesReq(");
    __sb.Append(", SessionId: ");
    __sb.Append(SessionId);
    __sb.Append(", Path: ");
    __sb.Append(Path);
    __sb.Append(", DataType: ");
    __sb.Append(DataType);
    __sb.Append(", Encoding: ");
    __sb.Append(Encoding);
    __sb.Append(", Compressor: ");
    __sb.Append(Compressor);
    if (Props != null && __isset.props) {
      __sb.Append(", Props: ");
      __sb.Append(Props);
    }
    if (Tags != null && __isset.tags) {
      __sb.Append(", Tags: ");
      __sb.Append(Tags);
    }
    if (Attributes != null && __isset.attributes) {
      __sb.Append(", Attributes: ");
      __sb.Append(Attributes);
    }
    if (MeasurementAlias != null && __isset.measurementAlias) {
      __sb.Append(", MeasurementAlias: ");
      __sb.Append(MeasurementAlias);
    }
    __sb.Append(")");
    return __sb.ToString();
  }

}

