/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;


#if !SILVERLIGHT
[Serializable]
#endif
public partial class TSCreateMultiTimeseriesReq : TBase
{
  private List<Dictionary<string, string>> _propsList;
  private List<Dictionary<string, string>> _tagsList;
  private List<Dictionary<string, string>> _attributesList;
  private List<string> _measurementAliasList;

  public long SessionId { get; set; }

  public List<string> Paths { get; set; }

  public List<int> DataTypes { get; set; }

  public List<int> Encodings { get; set; }

  public List<int> Compressors { get; set; }

  public List<Dictionary<string, string>> PropsList
  {
    get
    {
      return _propsList;
    }
    set
    {
      __isset.propsList = true;
      this._propsList = value;
    }
  }

  public List<Dictionary<string, string>> TagsList
  {
    get
    {
      return _tagsList;
    }
    set
    {
      __isset.tagsList = true;
      this._tagsList = value;
    }
  }

  public List<Dictionary<string, string>> AttributesList
  {
    get
    {
      return _attributesList;
    }
    set
    {
      __isset.attributesList = true;
      this._attributesList = value;
    }
  }

  public List<string> MeasurementAliasList
  {
    get
    {
      return _measurementAliasList;
    }
    set
    {
      __isset.measurementAliasList = true;
      this._measurementAliasList = value;
    }
  }


  public Isset __isset;
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public struct Isset {
    public bool propsList;
    public bool tagsList;
    public bool attributesList;
    public bool measurementAliasList;
  }

  public TSCreateMultiTimeseriesReq() {
  }

  public TSCreateMultiTimeseriesReq(long sessionId, List<string> paths, List<int> dataTypes, List<int> encodings, List<int> compressors) : this() {
    this.SessionId = sessionId;
    this.Paths = paths;
    this.DataTypes = dataTypes;
    this.Encodings = encodings;
    this.Compressors = compressors;
  }

  public void Read (TProtocol iprot)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      bool isset_sessionId = false;
      bool isset_paths = false;
      bool isset_dataTypes = false;
      bool isset_encodings = false;
      bool isset_compressors = false;
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I64) {
              SessionId = iprot.ReadI64();
              isset_sessionId = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.List) {
              {
                Paths = new List<string>();
                TList _list186 = iprot.ReadListBegin();
                for( int _i187 = 0; _i187 < _list186.Count; ++_i187)
                {
                  string _elem188;
                  _elem188 = iprot.ReadString();
                  Paths.Add(_elem188);
                }
                iprot.ReadListEnd();
              }
              isset_paths = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.List) {
              {
                DataTypes = new List<int>();
                TList _list189 = iprot.ReadListBegin();
                for( int _i190 = 0; _i190 < _list189.Count; ++_i190)
                {
                  int _elem191;
                  _elem191 = iprot.ReadI32();
                  DataTypes.Add(_elem191);
                }
                iprot.ReadListEnd();
              }
              isset_dataTypes = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.List) {
              {
                Encodings = new List<int>();
                TList _list192 = iprot.ReadListBegin();
                for( int _i193 = 0; _i193 < _list192.Count; ++_i193)
                {
                  int _elem194;
                  _elem194 = iprot.ReadI32();
                  Encodings.Add(_elem194);
                }
                iprot.ReadListEnd();
              }
              isset_encodings = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.List) {
              {
                Compressors = new List<int>();
                TList _list195 = iprot.ReadListBegin();
                for( int _i196 = 0; _i196 < _list195.Count; ++_i196)
                {
                  int _elem197;
                  _elem197 = iprot.ReadI32();
                  Compressors.Add(_elem197);
                }
                iprot.ReadListEnd();
              }
              isset_compressors = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.List) {
              {
                PropsList = new List<Dictionary<string, string>>();
                TList _list198 = iprot.ReadListBegin();
                for( int _i199 = 0; _i199 < _list198.Count; ++_i199)
                {
                  Dictionary<string, string> _elem200;
                  {
                    _elem200 = new Dictionary<string, string>();
                    TMap _map201 = iprot.ReadMapBegin();
                    for( int _i202 = 0; _i202 < _map201.Count; ++_i202)
                    {
                      string _key203;
                      string _val204;
                      _key203 = iprot.ReadString();
                      _val204 = iprot.ReadString();
                      _elem200[_key203] = _val204;
                    }
                    iprot.ReadMapEnd();
                  }
                  PropsList.Add(_elem200);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.List) {
              {
                TagsList = new List<Dictionary<string, string>>();
                TList _list205 = iprot.ReadListBegin();
                for( int _i206 = 0; _i206 < _list205.Count; ++_i206)
                {
                  Dictionary<string, string> _elem207;
                  {
                    _elem207 = new Dictionary<string, string>();
                    TMap _map208 = iprot.ReadMapBegin();
                    for( int _i209 = 0; _i209 < _map208.Count; ++_i209)
                    {
                      string _key210;
                      string _val211;
                      _key210 = iprot.ReadString();
                      _val211 = iprot.ReadString();
                      _elem207[_key210] = _val211;
                    }
                    iprot.ReadMapEnd();
                  }
                  TagsList.Add(_elem207);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.List) {
              {
                AttributesList = new List<Dictionary<string, string>>();
                TList _list212 = iprot.ReadListBegin();
                for( int _i213 = 0; _i213 < _list212.Count; ++_i213)
                {
                  Dictionary<string, string> _elem214;
                  {
                    _elem214 = new Dictionary<string, string>();
                    TMap _map215 = iprot.ReadMapBegin();
                    for( int _i216 = 0; _i216 < _map215.Count; ++_i216)
                    {
                      string _key217;
                      string _val218;
                      _key217 = iprot.ReadString();
                      _val218 = iprot.ReadString();
                      _elem214[_key217] = _val218;
                    }
                    iprot.ReadMapEnd();
                  }
                  AttributesList.Add(_elem214);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.List) {
              {
                MeasurementAliasList = new List<string>();
                TList _list219 = iprot.ReadListBegin();
                for( int _i220 = 0; _i220 < _list219.Count; ++_i220)
                {
                  string _elem221;
                  _elem221 = iprot.ReadString();
                  MeasurementAliasList.Add(_elem221);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
      if (!isset_sessionId)
        throw new TProtocolException(TProtocolException.INVALID_DATA, "required field SessionId not set");
      if (!isset_paths)
        throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Paths not set");
      if (!isset_dataTypes)
        throw new TProtocolException(TProtocolException.INVALID_DATA, "required field DataTypes not set");
      if (!isset_encodings)
        throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Encodings not set");
      if (!isset_compressors)
        throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Compressors not set");
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public void Write(TProtocol oprot) {
    oprot.IncrementRecursionDepth();
    try
    {
      TStruct struc = new TStruct("TSCreateMultiTimeseriesReq");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      field.Name = "sessionId";
      field.Type = TType.I64;
      field.ID = 1;
      oprot.WriteFieldBegin(field);
      oprot.WriteI64(SessionId);
      oprot.WriteFieldEnd();
      if (Paths == null)
        throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Paths not set");
      field.Name = "paths";
      field.Type = TType.List;
      field.ID = 2;
      oprot.WriteFieldBegin(field);
      {
        oprot.WriteListBegin(new TList(TType.String, Paths.Count));
        foreach (string _iter222 in Paths)
        {
          oprot.WriteString(_iter222);
        }
        oprot.WriteListEnd();
      }
      oprot.WriteFieldEnd();
      if (DataTypes == null)
        throw new TProtocolException(TProtocolException.INVALID_DATA, "required field DataTypes not set");
      field.Name = "dataTypes";
      field.Type = TType.List;
      field.ID = 3;
      oprot.WriteFieldBegin(field);
      {
        oprot.WriteListBegin(new TList(TType.I32, DataTypes.Count));
        foreach (int _iter223 in DataTypes)
        {
          oprot.WriteI32(_iter223);
        }
        oprot.WriteListEnd();
      }
      oprot.WriteFieldEnd();
      if (Encodings == null)
        throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Encodings not set");
      field.Name = "encodings";
      field.Type = TType.List;
      field.ID = 4;
      oprot.WriteFieldBegin(field);
      {
        oprot.WriteListBegin(new TList(TType.I32, Encodings.Count));
        foreach (int _iter224 in Encodings)
        {
          oprot.WriteI32(_iter224);
        }
        oprot.WriteListEnd();
      }
      oprot.WriteFieldEnd();
      if (Compressors == null)
        throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Compressors not set");
      field.Name = "compressors";
      field.Type = TType.List;
      field.ID = 5;
      oprot.WriteFieldBegin(field);
      {
        oprot.WriteListBegin(new TList(TType.I32, Compressors.Count));
        foreach (int _iter225 in Compressors)
        {
          oprot.WriteI32(_iter225);
        }
        oprot.WriteListEnd();
      }
      oprot.WriteFieldEnd();
      if (PropsList != null && __isset.propsList) {
        field.Name = "propsList";
        field.Type = TType.List;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Map, PropsList.Count));
          foreach (Dictionary<string, string> _iter226 in PropsList)
          {
            {
              oprot.WriteMapBegin(new TMap(TType.String, TType.String, _iter226.Count));
              foreach (string _iter227 in _iter226.Keys)
              {
                oprot.WriteString(_iter227);
                oprot.WriteString(_iter226[_iter227]);
              }
              oprot.WriteMapEnd();
            }
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (TagsList != null && __isset.tagsList) {
        field.Name = "tagsList";
        field.Type = TType.List;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Map, TagsList.Count));
          foreach (Dictionary<string, string> _iter228 in TagsList)
          {
            {
              oprot.WriteMapBegin(new TMap(TType.String, TType.String, _iter228.Count));
              foreach (string _iter229 in _iter228.Keys)
              {
                oprot.WriteString(_iter229);
                oprot.WriteString(_iter228[_iter229]);
              }
              oprot.WriteMapEnd();
            }
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (AttributesList != null && __isset.attributesList) {
        field.Name = "attributesList";
        field.Type = TType.List;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Map, AttributesList.Count));
          foreach (Dictionary<string, string> _iter230 in AttributesList)
          {
            {
              oprot.WriteMapBegin(new TMap(TType.String, TType.String, _iter230.Count));
              foreach (string _iter231 in _iter230.Keys)
              {
                oprot.WriteString(_iter231);
                oprot.WriteString(_iter230[_iter231]);
              }
              oprot.WriteMapEnd();
            }
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (MeasurementAliasList != null && __isset.measurementAliasList) {
        field.Name = "measurementAliasList";
        field.Type = TType.List;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.String, MeasurementAliasList.Count));
          foreach (string _iter232 in MeasurementAliasList)
          {
            oprot.WriteString(_iter232);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override string ToString() {
    StringBuilder __sb = new StringBuilder("TSCreateMultiTimeseriesReq(");
    __sb.Append(", SessionId: ");
    __sb.Append(SessionId);
    __sb.Append(", Paths: ");
    __sb.Append(Paths);
    __sb.Append(", DataTypes: ");
    __sb.Append(DataTypes);
    __sb.Append(", Encodings: ");
    __sb.Append(Encodings);
    __sb.Append(", Compressors: ");
    __sb.Append(Compressors);
    if (PropsList != null && __isset.propsList) {
      __sb.Append(", PropsList: ");
      __sb.Append(PropsList);
    }
    if (TagsList != null && __isset.tagsList) {
      __sb.Append(", TagsList: ");
      __sb.Append(TagsList);
    }
    if (AttributesList != null && __isset.attributesList) {
      __sb.Append(", AttributesList: ");
      __sb.Append(AttributesList);
    }
    if (MeasurementAliasList != null && __isset.measurementAliasList) {
      __sb.Append(", MeasurementAliasList: ");
      __sb.Append(MeasurementAliasList);
    }
    __sb.Append(")");
    return __sb.ToString();
  }

}

