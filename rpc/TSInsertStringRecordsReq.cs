/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;


#if !SILVERLIGHT
[Serializable]
#endif
public partial class TSInsertStringRecordsReq : TBase
{

  public long SessionId { get; set; }

  public List<string> DeviceIds { get; set; }

  public List<List<string>> MeasurementsList { get; set; }

  public List<List<string>> ValuesList { get; set; }

  public List<long> Timestamps { get; set; }

  public TSInsertStringRecordsReq() {
  }

  public TSInsertStringRecordsReq(long sessionId, List<string> deviceIds, List<List<string>> measurementsList, List<List<string>> valuesList, List<long> timestamps) : this() {
    this.SessionId = sessionId;
    this.DeviceIds = deviceIds;
    this.MeasurementsList = measurementsList;
    this.ValuesList = valuesList;
    this.Timestamps = timestamps;
  }

  public void Read (TProtocol iprot)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      bool isset_sessionId = false;
      bool isset_deviceIds = false;
      bool isset_measurementsList = false;
      bool isset_valuesList = false;
      bool isset_timestamps = false;
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I64) {
              SessionId = iprot.ReadI64();
              isset_sessionId = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.List) {
              {
                DeviceIds = new List<string>();
                TList _list139 = iprot.ReadListBegin();
                for( int _i140 = 0; _i140 < _list139.Count; ++_i140)
                {
                  string _elem141;
                  _elem141 = iprot.ReadString();
                  DeviceIds.Add(_elem141);
                }
                iprot.ReadListEnd();
              }
              isset_deviceIds = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.List) {
              {
                MeasurementsList = new List<List<string>>();
                TList _list142 = iprot.ReadListBegin();
                for( int _i143 = 0; _i143 < _list142.Count; ++_i143)
                {
                  List<string> _elem144;
                  {
                    _elem144 = new List<string>();
                    TList _list145 = iprot.ReadListBegin();
                    for( int _i146 = 0; _i146 < _list145.Count; ++_i146)
                    {
                      string _elem147;
                      _elem147 = iprot.ReadString();
                      _elem144.Add(_elem147);
                    }
                    iprot.ReadListEnd();
                  }
                  MeasurementsList.Add(_elem144);
                }
                iprot.ReadListEnd();
              }
              isset_measurementsList = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.List) {
              {
                ValuesList = new List<List<string>>();
                TList _list148 = iprot.ReadListBegin();
                for( int _i149 = 0; _i149 < _list148.Count; ++_i149)
                {
                  List<string> _elem150;
                  {
                    _elem150 = new List<string>();
                    TList _list151 = iprot.ReadListBegin();
                    for( int _i152 = 0; _i152 < _list151.Count; ++_i152)
                    {
                      string _elem153;
                      _elem153 = iprot.ReadString();
                      _elem150.Add(_elem153);
                    }
                    iprot.ReadListEnd();
                  }
                  ValuesList.Add(_elem150);
                }
                iprot.ReadListEnd();
              }
              isset_valuesList = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.List) {
              {
                Timestamps = new List<long>();
                TList _list154 = iprot.ReadListBegin();
                for( int _i155 = 0; _i155 < _list154.Count; ++_i155)
                {
                  long _elem156;
                  _elem156 = iprot.ReadI64();
                  Timestamps.Add(_elem156);
                }
                iprot.ReadListEnd();
              }
              isset_timestamps = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
      if (!isset_sessionId)
        throw new TProtocolException(TProtocolException.INVALID_DATA, "required field SessionId not set");
      if (!isset_deviceIds)
        throw new TProtocolException(TProtocolException.INVALID_DATA, "required field DeviceIds not set");
      if (!isset_measurementsList)
        throw new TProtocolException(TProtocolException.INVALID_DATA, "required field MeasurementsList not set");
      if (!isset_valuesList)
        throw new TProtocolException(TProtocolException.INVALID_DATA, "required field ValuesList not set");
      if (!isset_timestamps)
        throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Timestamps not set");
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public void Write(TProtocol oprot) {
    oprot.IncrementRecursionDepth();
    try
    {
      TStruct struc = new TStruct("TSInsertStringRecordsReq");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      field.Name = "sessionId";
      field.Type = TType.I64;
      field.ID = 1;
      oprot.WriteFieldBegin(field);
      oprot.WriteI64(SessionId);
      oprot.WriteFieldEnd();
      if (DeviceIds == null)
        throw new TProtocolException(TProtocolException.INVALID_DATA, "required field DeviceIds not set");
      field.Name = "deviceIds";
      field.Type = TType.List;
      field.ID = 2;
      oprot.WriteFieldBegin(field);
      {
        oprot.WriteListBegin(new TList(TType.String, DeviceIds.Count));
        foreach (string _iter157 in DeviceIds)
        {
          oprot.WriteString(_iter157);
        }
        oprot.WriteListEnd();
      }
      oprot.WriteFieldEnd();
      if (MeasurementsList == null)
        throw new TProtocolException(TProtocolException.INVALID_DATA, "required field MeasurementsList not set");
      field.Name = "measurementsList";
      field.Type = TType.List;
      field.ID = 3;
      oprot.WriteFieldBegin(field);
      {
        oprot.WriteListBegin(new TList(TType.List, MeasurementsList.Count));
        foreach (List<string> _iter158 in MeasurementsList)
        {
          {
            oprot.WriteListBegin(new TList(TType.String, _iter158.Count));
            foreach (string _iter159 in _iter158)
            {
              oprot.WriteString(_iter159);
            }
            oprot.WriteListEnd();
          }
        }
        oprot.WriteListEnd();
      }
      oprot.WriteFieldEnd();
      if (ValuesList == null)
        throw new TProtocolException(TProtocolException.INVALID_DATA, "required field ValuesList not set");
      field.Name = "valuesList";
      field.Type = TType.List;
      field.ID = 4;
      oprot.WriteFieldBegin(field);
      {
        oprot.WriteListBegin(new TList(TType.List, ValuesList.Count));
        foreach (List<string> _iter160 in ValuesList)
        {
          {
            oprot.WriteListBegin(new TList(TType.String, _iter160.Count));
            foreach (string _iter161 in _iter160)
            {
              oprot.WriteString(_iter161);
            }
            oprot.WriteListEnd();
          }
        }
        oprot.WriteListEnd();
      }
      oprot.WriteFieldEnd();
      if (Timestamps == null)
        throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Timestamps not set");
      field.Name = "timestamps";
      field.Type = TType.List;
      field.ID = 5;
      oprot.WriteFieldBegin(field);
      {
        oprot.WriteListBegin(new TList(TType.I64, Timestamps.Count));
        foreach (long _iter162 in Timestamps)
        {
          oprot.WriteI64(_iter162);
        }
        oprot.WriteListEnd();
      }
      oprot.WriteFieldEnd();
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override string ToString() {
    StringBuilder __sb = new StringBuilder("TSInsertStringRecordsReq(");
    __sb.Append(", SessionId: ");
    __sb.Append(SessionId);
    __sb.Append(", DeviceIds: ");
    __sb.Append(DeviceIds);
    __sb.Append(", MeasurementsList: ");
    __sb.Append(MeasurementsList);
    __sb.Append(", ValuesList: ");
    __sb.Append(ValuesList);
    __sb.Append(", Timestamps: ");
    __sb.Append(Timestamps);
    __sb.Append(")");
    return __sb.ToString();
  }

}

