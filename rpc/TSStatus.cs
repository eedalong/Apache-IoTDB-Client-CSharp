/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;


#if !SILVERLIGHT
[Serializable]
#endif
public partial class TSStatus : TBase
{
  private string _message;
  private List<TSStatus> _subStatus;
  private EndPoint _redirectNode;

  public int Code { get; set; }

  public string Message
  {
    get
    {
      return _message;
    }
    set
    {
      __isset.message = true;
      this._message = value;
    }
  }

  public List<TSStatus> SubStatus
  {
    get
    {
      return _subStatus;
    }
    set
    {
      __isset.subStatus = true;
      this._subStatus = value;
    }
  }

  public EndPoint RedirectNode
  {
    get
    {
      return _redirectNode;
    }
    set
    {
      __isset.redirectNode = true;
      this._redirectNode = value;
    }
  }


  public Isset __isset;
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public struct Isset {
    public bool message;
    public bool subStatus;
    public bool redirectNode;
  }

  public TSStatus() {
  }

  public TSStatus(int code) : this() {
    this.Code = code;
  }

  public void Read (TProtocol iprot)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      bool isset_code = false;
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              Code = iprot.ReadI32();
              isset_code = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              Message = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.List) {
              {
                SubStatus = new List<TSStatus>();
                TList _list0 = iprot.ReadListBegin();
                for( int _i1 = 0; _i1 < _list0.Count; ++_i1)
                {
                  TSStatus _elem2;
                  _elem2 = new TSStatus();
                  _elem2.Read(iprot);
                  SubStatus.Add(_elem2);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.Struct) {
              RedirectNode = new EndPoint();
              RedirectNode.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
      if (!isset_code)
        throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Code not set");
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public void Write(TProtocol oprot) {
    oprot.IncrementRecursionDepth();
    try
    {
      TStruct struc = new TStruct("TSStatus");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      field.Name = "code";
      field.Type = TType.I32;
      field.ID = 1;
      oprot.WriteFieldBegin(field);
      oprot.WriteI32(Code);
      oprot.WriteFieldEnd();
      if (Message != null && __isset.message) {
        field.Name = "message";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Message);
        oprot.WriteFieldEnd();
      }
      if (SubStatus != null && __isset.subStatus) {
        field.Name = "subStatus";
        field.Type = TType.List;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, SubStatus.Count));
          foreach (TSStatus _iter3 in SubStatus)
          {
            _iter3.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (RedirectNode != null && __isset.redirectNode) {
        field.Name = "redirectNode";
        field.Type = TType.Struct;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        RedirectNode.Write(oprot);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override string ToString() {
    StringBuilder __sb = new StringBuilder("TSStatus(");
    __sb.Append(", Code: ");
    __sb.Append(Code);
    if (Message != null && __isset.message) {
      __sb.Append(", Message: ");
      __sb.Append(Message);
    }
    if (SubStatus != null && __isset.subStatus) {
      __sb.Append(", SubStatus: ");
      __sb.Append(SubStatus);
    }
    if (RedirectNode != null && __isset.redirectNode) {
      __sb.Append(", RedirectNode: ");
      __sb.Append(RedirectNode== null ? "<null>" : RedirectNode.ToString());
    }
    __sb.Append(")");
    return __sb.ToString();
  }

}

