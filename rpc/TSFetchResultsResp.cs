/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;


#if !SILVERLIGHT
[Serializable]
#endif
public partial class TSFetchResultsResp : TBase
{
  private TSQueryDataSet _queryDataSet;
  private TSQueryNonAlignDataSet _nonAlignQueryDataSet;

  public TSStatus Status { get; set; }

  public bool HasResultSet { get; set; }

  public bool IsAlign { get; set; }

  public TSQueryDataSet QueryDataSet
  {
    get
    {
      return _queryDataSet;
    }
    set
    {
      __isset.queryDataSet = true;
      this._queryDataSet = value;
    }
  }

  public TSQueryNonAlignDataSet NonAlignQueryDataSet
  {
    get
    {
      return _nonAlignQueryDataSet;
    }
    set
    {
      __isset.nonAlignQueryDataSet = true;
      this._nonAlignQueryDataSet = value;
    }
  }


  public Isset __isset;
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public struct Isset {
    public bool queryDataSet;
    public bool nonAlignQueryDataSet;
  }

  public TSFetchResultsResp() {
  }

  public TSFetchResultsResp(TSStatus status, bool hasResultSet, bool isAlign) : this() {
    this.Status = status;
    this.HasResultSet = hasResultSet;
    this.IsAlign = isAlign;
  }

  public void Read (TProtocol iprot)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      bool isset_status = false;
      bool isset_hasResultSet = false;
      bool isset_isAlign = false;
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Struct) {
              Status = new TSStatus();
              Status.Read(iprot);
              isset_status = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Bool) {
              HasResultSet = iprot.ReadBool();
              isset_hasResultSet = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.Bool) {
              IsAlign = iprot.ReadBool();
              isset_isAlign = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.Struct) {
              QueryDataSet = new TSQueryDataSet();
              QueryDataSet.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.Struct) {
              NonAlignQueryDataSet = new TSQueryNonAlignDataSet();
              NonAlignQueryDataSet.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
      if (!isset_status)
        throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Status not set");
      if (!isset_hasResultSet)
        throw new TProtocolException(TProtocolException.INVALID_DATA, "required field HasResultSet not set");
      if (!isset_isAlign)
        throw new TProtocolException(TProtocolException.INVALID_DATA, "required field IsAlign not set");
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public void Write(TProtocol oprot) {
    oprot.IncrementRecursionDepth();
    try
    {
      TStruct struc = new TStruct("TSFetchResultsResp");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Status == null)
        throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Status not set");
      field.Name = "status";
      field.Type = TType.Struct;
      field.ID = 1;
      oprot.WriteFieldBegin(field);
      Status.Write(oprot);
      oprot.WriteFieldEnd();
      field.Name = "hasResultSet";
      field.Type = TType.Bool;
      field.ID = 2;
      oprot.WriteFieldBegin(field);
      oprot.WriteBool(HasResultSet);
      oprot.WriteFieldEnd();
      field.Name = "isAlign";
      field.Type = TType.Bool;
      field.ID = 3;
      oprot.WriteFieldBegin(field);
      oprot.WriteBool(IsAlign);
      oprot.WriteFieldEnd();
      if (QueryDataSet != null && __isset.queryDataSet) {
        field.Name = "queryDataSet";
        field.Type = TType.Struct;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        QueryDataSet.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (NonAlignQueryDataSet != null && __isset.nonAlignQueryDataSet) {
        field.Name = "nonAlignQueryDataSet";
        field.Type = TType.Struct;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        NonAlignQueryDataSet.Write(oprot);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override string ToString() {
    StringBuilder __sb = new StringBuilder("TSFetchResultsResp(");
    __sb.Append(", Status: ");
    __sb.Append(Status== null ? "<null>" : Status.ToString());
    __sb.Append(", HasResultSet: ");
    __sb.Append(HasResultSet);
    __sb.Append(", IsAlign: ");
    __sb.Append(IsAlign);
    if (QueryDataSet != null && __isset.queryDataSet) {
      __sb.Append(", QueryDataSet: ");
      __sb.Append(QueryDataSet== null ? "<null>" : QueryDataSet.ToString());
    }
    if (NonAlignQueryDataSet != null && __isset.nonAlignQueryDataSet) {
      __sb.Append(", NonAlignQueryDataSet: ");
      __sb.Append(NonAlignQueryDataSet== null ? "<null>" : NonAlignQueryDataSet.ToString());
    }
    __sb.Append(")");
    return __sb.ToString();
  }

}

