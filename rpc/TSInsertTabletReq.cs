/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;


#if !SILVERLIGHT
[Serializable]
#endif
public partial class TSInsertTabletReq : TBase
{

  public long SessionId { get; set; }

  public string DeviceId { get; set; }

  public List<string> Measurements { get; set; }

  public byte[] Values { get; set; }

  public byte[] Timestamps { get; set; }

  public List<int> Types { get; set; }

  public int Size { get; set; }

  public TSInsertTabletReq() {
  }

  public TSInsertTabletReq(long sessionId, string deviceId, List<string> measurements, byte[] values, byte[] timestamps, List<int> types, int size) : this() {
    this.SessionId = sessionId;
    this.DeviceId = deviceId;
    this.Measurements = measurements;
    this.Values = values;
    this.Timestamps = timestamps;
    this.Types = types;
    this.Size = size;
  }

  public void Read (TProtocol iprot)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      bool isset_sessionId = false;
      bool isset_deviceId = false;
      bool isset_measurements = false;
      bool isset_values = false;
      bool isset_timestamps = false;
      bool isset_types = false;
      bool isset_size = false;
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I64) {
              SessionId = iprot.ReadI64();
              isset_sessionId = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              DeviceId = iprot.ReadString();
              isset_deviceId = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.List) {
              {
                Measurements = new List<string>();
                TList _list63 = iprot.ReadListBegin();
                for( int _i64 = 0; _i64 < _list63.Count; ++_i64)
                {
                  string _elem65;
                  _elem65 = iprot.ReadString();
                  Measurements.Add(_elem65);
                }
                iprot.ReadListEnd();
              }
              isset_measurements = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.String) {
              Values = iprot.ReadBinary();
              isset_values = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.String) {
              Timestamps = iprot.ReadBinary();
              isset_timestamps = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.List) {
              {
                Types = new List<int>();
                TList _list66 = iprot.ReadListBegin();
                for( int _i67 = 0; _i67 < _list66.Count; ++_i67)
                {
                  int _elem68;
                  _elem68 = iprot.ReadI32();
                  Types.Add(_elem68);
                }
                iprot.ReadListEnd();
              }
              isset_types = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.I32) {
              Size = iprot.ReadI32();
              isset_size = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
      if (!isset_sessionId)
        throw new TProtocolException(TProtocolException.INVALID_DATA, "required field SessionId not set");
      if (!isset_deviceId)
        throw new TProtocolException(TProtocolException.INVALID_DATA, "required field DeviceId not set");
      if (!isset_measurements)
        throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Measurements not set");
      if (!isset_values)
        throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Values not set");
      if (!isset_timestamps)
        throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Timestamps not set");
      if (!isset_types)
        throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Types not set");
      if (!isset_size)
        throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Size not set");
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public void Write(TProtocol oprot) {
    oprot.IncrementRecursionDepth();
    try
    {
      TStruct struc = new TStruct("TSInsertTabletReq");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      field.Name = "sessionId";
      field.Type = TType.I64;
      field.ID = 1;
      oprot.WriteFieldBegin(field);
      oprot.WriteI64(SessionId);
      oprot.WriteFieldEnd();
      if (DeviceId == null)
        throw new TProtocolException(TProtocolException.INVALID_DATA, "required field DeviceId not set");
      field.Name = "deviceId";
      field.Type = TType.String;
      field.ID = 2;
      oprot.WriteFieldBegin(field);
      oprot.WriteString(DeviceId);
      oprot.WriteFieldEnd();
      if (Measurements == null)
        throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Measurements not set");
      field.Name = "measurements";
      field.Type = TType.List;
      field.ID = 3;
      oprot.WriteFieldBegin(field);
      {
        oprot.WriteListBegin(new TList(TType.String, Measurements.Count));
        foreach (string _iter69 in Measurements)
        {
          oprot.WriteString(_iter69);
        }
        oprot.WriteListEnd();
      }
      oprot.WriteFieldEnd();
      if (Values == null)
        throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Values not set");
      field.Name = "values";
      field.Type = TType.String;
      field.ID = 4;
      oprot.WriteFieldBegin(field);
      oprot.WriteBinary(Values);
      oprot.WriteFieldEnd();
      if (Timestamps == null)
        throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Timestamps not set");
      field.Name = "timestamps";
      field.Type = TType.String;
      field.ID = 5;
      oprot.WriteFieldBegin(field);
      oprot.WriteBinary(Timestamps);
      oprot.WriteFieldEnd();
      if (Types == null)
        throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Types not set");
      field.Name = "types";
      field.Type = TType.List;
      field.ID = 6;
      oprot.WriteFieldBegin(field);
      {
        oprot.WriteListBegin(new TList(TType.I32, Types.Count));
        foreach (int _iter70 in Types)
        {
          oprot.WriteI32(_iter70);
        }
        oprot.WriteListEnd();
      }
      oprot.WriteFieldEnd();
      field.Name = "size";
      field.Type = TType.I32;
      field.ID = 7;
      oprot.WriteFieldBegin(field);
      oprot.WriteI32(Size);
      oprot.WriteFieldEnd();
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override string ToString() {
    StringBuilder __sb = new StringBuilder("TSInsertTabletReq(");
    __sb.Append(", SessionId: ");
    __sb.Append(SessionId);
    __sb.Append(", DeviceId: ");
    __sb.Append(DeviceId);
    __sb.Append(", Measurements: ");
    __sb.Append(Measurements);
    __sb.Append(", Values: ");
    __sb.Append(Values);
    __sb.Append(", Timestamps: ");
    __sb.Append(Timestamps);
    __sb.Append(", Types: ");
    __sb.Append(Types);
    __sb.Append(", Size: ");
    __sb.Append(Size);
    __sb.Append(")");
    return __sb.ToString();
  }

}

