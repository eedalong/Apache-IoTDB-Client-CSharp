/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;


#if !SILVERLIGHT
[Serializable]
#endif
public partial class TSGetTimeZoneResp : TBase
{

  public TSStatus Status { get; set; }

  public string TimeZone { get; set; }

  public TSGetTimeZoneResp() {
  }

  public TSGetTimeZoneResp(TSStatus status, string timeZone) : this() {
    this.Status = status;
    this.TimeZone = timeZone;
  }

  public void Read (TProtocol iprot)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      bool isset_status = false;
      bool isset_timeZone = false;
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Struct) {
              Status = new TSStatus();
              Status.Read(iprot);
              isset_status = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              TimeZone = iprot.ReadString();
              isset_timeZone = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
      if (!isset_status)
        throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Status not set");
      if (!isset_timeZone)
        throw new TProtocolException(TProtocolException.INVALID_DATA, "required field TimeZone not set");
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public void Write(TProtocol oprot) {
    oprot.IncrementRecursionDepth();
    try
    {
      TStruct struc = new TStruct("TSGetTimeZoneResp");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Status == null)
        throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Status not set");
      field.Name = "status";
      field.Type = TType.Struct;
      field.ID = 1;
      oprot.WriteFieldBegin(field);
      Status.Write(oprot);
      oprot.WriteFieldEnd();
      if (TimeZone == null)
        throw new TProtocolException(TProtocolException.INVALID_DATA, "required field TimeZone not set");
      field.Name = "timeZone";
      field.Type = TType.String;
      field.ID = 2;
      oprot.WriteFieldBegin(field);
      oprot.WriteString(TimeZone);
      oprot.WriteFieldEnd();
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override string ToString() {
    StringBuilder __sb = new StringBuilder("TSGetTimeZoneResp(");
    __sb.Append(", Status: ");
    __sb.Append(Status== null ? "<null>" : Status.ToString());
    __sb.Append(", TimeZone: ");
    __sb.Append(TimeZone);
    __sb.Append(")");
    return __sb.ToString();
  }

}

