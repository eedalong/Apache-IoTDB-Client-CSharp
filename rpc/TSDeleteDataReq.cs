/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;


#if !SILVERLIGHT
[Serializable]
#endif
public partial class TSDeleteDataReq : TBase
{

  public long SessionId { get; set; }

  public List<string> Paths { get; set; }

  public long StartTime { get; set; }

  public long EndTime { get; set; }

  public TSDeleteDataReq() {
  }

  public TSDeleteDataReq(long sessionId, List<string> paths, long startTime, long endTime) : this() {
    this.SessionId = sessionId;
    this.Paths = paths;
    this.StartTime = startTime;
    this.EndTime = endTime;
  }

  public void Read (TProtocol iprot)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      bool isset_sessionId = false;
      bool isset_paths = false;
      bool isset_startTime = false;
      bool isset_endTime = false;
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I64) {
              SessionId = iprot.ReadI64();
              isset_sessionId = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.List) {
              {
                Paths = new List<string>();
                TList _list163 = iprot.ReadListBegin();
                for( int _i164 = 0; _i164 < _list163.Count; ++_i164)
                {
                  string _elem165;
                  _elem165 = iprot.ReadString();
                  Paths.Add(_elem165);
                }
                iprot.ReadListEnd();
              }
              isset_paths = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I64) {
              StartTime = iprot.ReadI64();
              isset_startTime = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I64) {
              EndTime = iprot.ReadI64();
              isset_endTime = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
      if (!isset_sessionId)
        throw new TProtocolException(TProtocolException.INVALID_DATA, "required field SessionId not set");
      if (!isset_paths)
        throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Paths not set");
      if (!isset_startTime)
        throw new TProtocolException(TProtocolException.INVALID_DATA, "required field StartTime not set");
      if (!isset_endTime)
        throw new TProtocolException(TProtocolException.INVALID_DATA, "required field EndTime not set");
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public void Write(TProtocol oprot) {
    oprot.IncrementRecursionDepth();
    try
    {
      TStruct struc = new TStruct("TSDeleteDataReq");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      field.Name = "sessionId";
      field.Type = TType.I64;
      field.ID = 1;
      oprot.WriteFieldBegin(field);
      oprot.WriteI64(SessionId);
      oprot.WriteFieldEnd();
      if (Paths == null)
        throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Paths not set");
      field.Name = "paths";
      field.Type = TType.List;
      field.ID = 2;
      oprot.WriteFieldBegin(field);
      {
        oprot.WriteListBegin(new TList(TType.String, Paths.Count));
        foreach (string _iter166 in Paths)
        {
          oprot.WriteString(_iter166);
        }
        oprot.WriteListEnd();
      }
      oprot.WriteFieldEnd();
      field.Name = "startTime";
      field.Type = TType.I64;
      field.ID = 3;
      oprot.WriteFieldBegin(field);
      oprot.WriteI64(StartTime);
      oprot.WriteFieldEnd();
      field.Name = "endTime";
      field.Type = TType.I64;
      field.ID = 4;
      oprot.WriteFieldBegin(field);
      oprot.WriteI64(EndTime);
      oprot.WriteFieldEnd();
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override string ToString() {
    StringBuilder __sb = new StringBuilder("TSDeleteDataReq(");
    __sb.Append(", SessionId: ");
    __sb.Append(SessionId);
    __sb.Append(", Paths: ");
    __sb.Append(Paths);
    __sb.Append(", StartTime: ");
    __sb.Append(StartTime);
    __sb.Append(", EndTime: ");
    __sb.Append(EndTime);
    __sb.Append(")");
    return __sb.ToString();
  }

}

