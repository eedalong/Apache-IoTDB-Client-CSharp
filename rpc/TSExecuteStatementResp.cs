/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;


#if !SILVERLIGHT
[Serializable]
#endif
public partial class TSExecuteStatementResp : TBase
{
  private long _queryId;
  private List<string> _columns;
  private string _operationType;
  private bool _ignoreTimeStamp;
  private List<string> _dataTypeList;
  private TSQueryDataSet _queryDataSet;
  private TSQueryNonAlignDataSet _nonAlignQueryDataSet;
  private Dictionary<string, int> _columnNameIndexMap;

  public TSStatus Status { get; set; }

  public long QueryId
  {
    get
    {
      return _queryId;
    }
    set
    {
      __isset.queryId = true;
      this._queryId = value;
    }
  }

  public List<string> Columns
  {
    get
    {
      return _columns;
    }
    set
    {
      __isset.columns = true;
      this._columns = value;
    }
  }

  public string OperationType
  {
    get
    {
      return _operationType;
    }
    set
    {
      __isset.operationType = true;
      this._operationType = value;
    }
  }

  public bool IgnoreTimeStamp
  {
    get
    {
      return _ignoreTimeStamp;
    }
    set
    {
      __isset.ignoreTimeStamp = true;
      this._ignoreTimeStamp = value;
    }
  }

  public List<string> DataTypeList
  {
    get
    {
      return _dataTypeList;
    }
    set
    {
      __isset.dataTypeList = true;
      this._dataTypeList = value;
    }
  }

  public TSQueryDataSet QueryDataSet
  {
    get
    {
      return _queryDataSet;
    }
    set
    {
      __isset.queryDataSet = true;
      this._queryDataSet = value;
    }
  }

  public TSQueryNonAlignDataSet NonAlignQueryDataSet
  {
    get
    {
      return _nonAlignQueryDataSet;
    }
    set
    {
      __isset.nonAlignQueryDataSet = true;
      this._nonAlignQueryDataSet = value;
    }
  }

  public Dictionary<string, int> ColumnNameIndexMap
  {
    get
    {
      return _columnNameIndexMap;
    }
    set
    {
      __isset.columnNameIndexMap = true;
      this._columnNameIndexMap = value;
    }
  }


  public Isset __isset;
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public struct Isset {
    public bool queryId;
    public bool columns;
    public bool operationType;
    public bool ignoreTimeStamp;
    public bool dataTypeList;
    public bool queryDataSet;
    public bool nonAlignQueryDataSet;
    public bool columnNameIndexMap;
  }

  public TSExecuteStatementResp() {
  }

  public TSExecuteStatementResp(TSStatus status) : this() {
    this.Status = status;
  }

  public void Read (TProtocol iprot)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      bool isset_status = false;
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Struct) {
              Status = new TSStatus();
              Status.Read(iprot);
              isset_status = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I64) {
              QueryId = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.List) {
              {
                Columns = new List<string>();
                TList _list20 = iprot.ReadListBegin();
                for( int _i21 = 0; _i21 < _list20.Count; ++_i21)
                {
                  string _elem22;
                  _elem22 = iprot.ReadString();
                  Columns.Add(_elem22);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.String) {
              OperationType = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.Bool) {
              IgnoreTimeStamp = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.List) {
              {
                DataTypeList = new List<string>();
                TList _list23 = iprot.ReadListBegin();
                for( int _i24 = 0; _i24 < _list23.Count; ++_i24)
                {
                  string _elem25;
                  _elem25 = iprot.ReadString();
                  DataTypeList.Add(_elem25);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.Struct) {
              QueryDataSet = new TSQueryDataSet();
              QueryDataSet.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.Struct) {
              NonAlignQueryDataSet = new TSQueryNonAlignDataSet();
              NonAlignQueryDataSet.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.Map) {
              {
                ColumnNameIndexMap = new Dictionary<string, int>();
                TMap _map26 = iprot.ReadMapBegin();
                for( int _i27 = 0; _i27 < _map26.Count; ++_i27)
                {
                  string _key28;
                  int _val29;
                  _key28 = iprot.ReadString();
                  _val29 = iprot.ReadI32();
                  ColumnNameIndexMap[_key28] = _val29;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
      if (!isset_status)
        throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Status not set");
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public void Write(TProtocol oprot) {
    oprot.IncrementRecursionDepth();
    try
    {
      TStruct struc = new TStruct("TSExecuteStatementResp");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Status == null)
        throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Status not set");
      field.Name = "status";
      field.Type = TType.Struct;
      field.ID = 1;
      oprot.WriteFieldBegin(field);
      Status.Write(oprot);
      oprot.WriteFieldEnd();
      if (__isset.queryId) {
        field.Name = "queryId";
        field.Type = TType.I64;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(QueryId);
        oprot.WriteFieldEnd();
      }
      if (Columns != null && __isset.columns) {
        field.Name = "columns";
        field.Type = TType.List;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.String, Columns.Count));
          foreach (string _iter30 in Columns)
          {
            oprot.WriteString(_iter30);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (OperationType != null && __isset.operationType) {
        field.Name = "operationType";
        field.Type = TType.String;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(OperationType);
        oprot.WriteFieldEnd();
      }
      if (__isset.ignoreTimeStamp) {
        field.Name = "ignoreTimeStamp";
        field.Type = TType.Bool;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(IgnoreTimeStamp);
        oprot.WriteFieldEnd();
      }
      if (DataTypeList != null && __isset.dataTypeList) {
        field.Name = "dataTypeList";
        field.Type = TType.List;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.String, DataTypeList.Count));
          foreach (string _iter31 in DataTypeList)
          {
            oprot.WriteString(_iter31);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (QueryDataSet != null && __isset.queryDataSet) {
        field.Name = "queryDataSet";
        field.Type = TType.Struct;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        QueryDataSet.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (NonAlignQueryDataSet != null && __isset.nonAlignQueryDataSet) {
        field.Name = "nonAlignQueryDataSet";
        field.Type = TType.Struct;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        NonAlignQueryDataSet.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (ColumnNameIndexMap != null && __isset.columnNameIndexMap) {
        field.Name = "columnNameIndexMap";
        field.Type = TType.Map;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.String, TType.I32, ColumnNameIndexMap.Count));
          foreach (string _iter32 in ColumnNameIndexMap.Keys)
          {
            oprot.WriteString(_iter32);
            oprot.WriteI32(ColumnNameIndexMap[_iter32]);
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override string ToString() {
    StringBuilder __sb = new StringBuilder("TSExecuteStatementResp(");
    __sb.Append(", Status: ");
    __sb.Append(Status== null ? "<null>" : Status.ToString());
    if (__isset.queryId) {
      __sb.Append(", QueryId: ");
      __sb.Append(QueryId);
    }
    if (Columns != null && __isset.columns) {
      __sb.Append(", Columns: ");
      __sb.Append(Columns);
    }
    if (OperationType != null && __isset.operationType) {
      __sb.Append(", OperationType: ");
      __sb.Append(OperationType);
    }
    if (__isset.ignoreTimeStamp) {
      __sb.Append(", IgnoreTimeStamp: ");
      __sb.Append(IgnoreTimeStamp);
    }
    if (DataTypeList != null && __isset.dataTypeList) {
      __sb.Append(", DataTypeList: ");
      __sb.Append(DataTypeList);
    }
    if (QueryDataSet != null && __isset.queryDataSet) {
      __sb.Append(", QueryDataSet: ");
      __sb.Append(QueryDataSet== null ? "<null>" : QueryDataSet.ToString());
    }
    if (NonAlignQueryDataSet != null && __isset.nonAlignQueryDataSet) {
      __sb.Append(", NonAlignQueryDataSet: ");
      __sb.Append(NonAlignQueryDataSet== null ? "<null>" : NonAlignQueryDataSet.ToString());
    }
    if (ColumnNameIndexMap != null && __isset.columnNameIndexMap) {
      __sb.Append(", ColumnNameIndexMap: ");
      __sb.Append(ColumnNameIndexMap);
    }
    __sb.Append(")");
    return __sb.ToString();
  }

}

