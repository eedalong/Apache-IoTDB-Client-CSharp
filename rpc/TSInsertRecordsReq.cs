/**
 * Autogenerated by Thrift Compiler (0.14.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling


public partial class TSInsertRecordsReq : TBase
{

  public long SessionId { get; set; }

  public List<string> DeviceIds { get; set; }

  public List<List<string>> MeasurementsList { get; set; }

  public List<byte[]> ValuesList { get; set; }

  public List<long> Timestamps { get; set; }

  public TSInsertRecordsReq()
  {
  }

  public TSInsertRecordsReq(long sessionId, List<string> deviceIds, List<List<string>> measurementsList, List<byte[]> valuesList, List<long> timestamps) : this()
  {
    this.SessionId = sessionId;
    this.DeviceIds = deviceIds;
    this.MeasurementsList = measurementsList;
    this.ValuesList = valuesList;
    this.Timestamps = timestamps;
  }

  public TSInsertRecordsReq DeepCopy()
  {
    var tmp149 = new TSInsertRecordsReq();
    tmp149.SessionId = this.SessionId;
    if((DeviceIds != null))
    {
      tmp149.DeviceIds = this.DeviceIds.DeepCopy();
    }
    if((MeasurementsList != null))
    {
      tmp149.MeasurementsList = this.MeasurementsList.DeepCopy();
    }
    if((ValuesList != null))
    {
      tmp149.ValuesList = this.ValuesList.DeepCopy();
    }
    if((Timestamps != null))
    {
      tmp149.Timestamps = this.Timestamps.DeepCopy();
    }
    return tmp149;
  }

  public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      bool isset_sessionId = false;
      bool isset_deviceIds = false;
      bool isset_measurementsList = false;
      bool isset_valuesList = false;
      bool isset_timestamps = false;
      TField field;
      await iprot.ReadStructBeginAsync(cancellationToken);
      while (true)
      {
        field = await iprot.ReadFieldBeginAsync(cancellationToken);
        if (field.Type == TType.Stop)
        {
          break;
        }

        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I64)
            {
              SessionId = await iprot.ReadI64Async(cancellationToken);
              isset_sessionId = true;
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 2:
            if (field.Type == TType.List)
            {
              {
                TList _list150 = await iprot.ReadListBeginAsync(cancellationToken);
                DeviceIds = new List<string>(_list150.Count);
                for(int _i151 = 0; _i151 < _list150.Count; ++_i151)
                {
                  string _elem152;
                  _elem152 = await iprot.ReadStringAsync(cancellationToken);
                  DeviceIds.Add(_elem152);
                }
                await iprot.ReadListEndAsync(cancellationToken);
              }
              isset_deviceIds = true;
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 3:
            if (field.Type == TType.List)
            {
              {
                TList _list153 = await iprot.ReadListBeginAsync(cancellationToken);
                MeasurementsList = new List<List<string>>(_list153.Count);
                for(int _i154 = 0; _i154 < _list153.Count; ++_i154)
                {
                  List<string> _elem155;
                  {
                    TList _list156 = await iprot.ReadListBeginAsync(cancellationToken);
                    _elem155 = new List<string>(_list156.Count);
                    for(int _i157 = 0; _i157 < _list156.Count; ++_i157)
                    {
                      string _elem158;
                      _elem158 = await iprot.ReadStringAsync(cancellationToken);
                      _elem155.Add(_elem158);
                    }
                    await iprot.ReadListEndAsync(cancellationToken);
                  }
                  MeasurementsList.Add(_elem155);
                }
                await iprot.ReadListEndAsync(cancellationToken);
              }
              isset_measurementsList = true;
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 4:
            if (field.Type == TType.List)
            {
              {
                TList _list159 = await iprot.ReadListBeginAsync(cancellationToken);
                ValuesList = new List<byte[]>(_list159.Count);
                for(int _i160 = 0; _i160 < _list159.Count; ++_i160)
                {
                  byte[] _elem161;
                  _elem161 = await iprot.ReadBinaryAsync(cancellationToken);
                  ValuesList.Add(_elem161);
                }
                await iprot.ReadListEndAsync(cancellationToken);
              }
              isset_valuesList = true;
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 5:
            if (field.Type == TType.List)
            {
              {
                TList _list162 = await iprot.ReadListBeginAsync(cancellationToken);
                Timestamps = new List<long>(_list162.Count);
                for(int _i163 = 0; _i163 < _list162.Count; ++_i163)
                {
                  long _elem164;
                  _elem164 = await iprot.ReadI64Async(cancellationToken);
                  Timestamps.Add(_elem164);
                }
                await iprot.ReadListEndAsync(cancellationToken);
              }
              isset_timestamps = true;
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          default: 
            await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            break;
        }

        await iprot.ReadFieldEndAsync(cancellationToken);
      }

      await iprot.ReadStructEndAsync(cancellationToken);
      if (!isset_sessionId)
      {
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      }
      if (!isset_deviceIds)
      {
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      }
      if (!isset_measurementsList)
      {
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      }
      if (!isset_valuesList)
      {
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      }
      if (!isset_timestamps)
      {
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      }
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
  {
    oprot.IncrementRecursionDepth();
    try
    {
      var struc = new TStruct("TSInsertRecordsReq");
      await oprot.WriteStructBeginAsync(struc, cancellationToken);
      var field = new TField();
      field.Name = "sessionId";
      field.Type = TType.I64;
      field.ID = 1;
      await oprot.WriteFieldBeginAsync(field, cancellationToken);
      await oprot.WriteI64Async(SessionId, cancellationToken);
      await oprot.WriteFieldEndAsync(cancellationToken);
      if((DeviceIds != null))
      {
        field.Name = "deviceIds";
        field.Type = TType.List;
        field.ID = 2;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        {
          await oprot.WriteListBeginAsync(new TList(TType.String, DeviceIds.Count), cancellationToken);
          foreach (string _iter165 in DeviceIds)
          {
            await oprot.WriteStringAsync(_iter165, cancellationToken);
          }
          await oprot.WriteListEndAsync(cancellationToken);
        }
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if((MeasurementsList != null))
      {
        field.Name = "measurementsList";
        field.Type = TType.List;
        field.ID = 3;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        {
          await oprot.WriteListBeginAsync(new TList(TType.List, MeasurementsList.Count), cancellationToken);
          foreach (List<string> _iter166 in MeasurementsList)
          {
            {
              await oprot.WriteListBeginAsync(new TList(TType.String, _iter166.Count), cancellationToken);
              foreach (string _iter167 in _iter166)
              {
                await oprot.WriteStringAsync(_iter167, cancellationToken);
              }
              await oprot.WriteListEndAsync(cancellationToken);
            }
          }
          await oprot.WriteListEndAsync(cancellationToken);
        }
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if((ValuesList != null))
      {
        field.Name = "valuesList";
        field.Type = TType.List;
        field.ID = 4;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        {
          await oprot.WriteListBeginAsync(new TList(TType.String, ValuesList.Count), cancellationToken);
          foreach (byte[] _iter168 in ValuesList)
          {
            await oprot.WriteBinaryAsync(_iter168, cancellationToken);
          }
          await oprot.WriteListEndAsync(cancellationToken);
        }
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if((Timestamps != null))
      {
        field.Name = "timestamps";
        field.Type = TType.List;
        field.ID = 5;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        {
          await oprot.WriteListBeginAsync(new TList(TType.I64, Timestamps.Count), cancellationToken);
          foreach (long _iter169 in Timestamps)
          {
            await oprot.WriteI64Async(_iter169, cancellationToken);
          }
          await oprot.WriteListEndAsync(cancellationToken);
        }
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      await oprot.WriteFieldStopAsync(cancellationToken);
      await oprot.WriteStructEndAsync(cancellationToken);
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override bool Equals(object that)
  {
    if (!(that is TSInsertRecordsReq other)) return false;
    if (ReferenceEquals(this, other)) return true;
    return System.Object.Equals(SessionId, other.SessionId)
      && TCollections.Equals(DeviceIds, other.DeviceIds)
      && TCollections.Equals(MeasurementsList, other.MeasurementsList)
      && TCollections.Equals(ValuesList, other.ValuesList)
      && TCollections.Equals(Timestamps, other.Timestamps);
  }

  public override int GetHashCode() {
    int hashcode = 157;
    unchecked {
      hashcode = (hashcode * 397) + SessionId.GetHashCode();
      if((DeviceIds != null))
      {
        hashcode = (hashcode * 397) + TCollections.GetHashCode(DeviceIds);
      }
      if((MeasurementsList != null))
      {
        hashcode = (hashcode * 397) + TCollections.GetHashCode(MeasurementsList);
      }
      if((ValuesList != null))
      {
        hashcode = (hashcode * 397) + TCollections.GetHashCode(ValuesList);
      }
      if((Timestamps != null))
      {
        hashcode = (hashcode * 397) + TCollections.GetHashCode(Timestamps);
      }
    }
    return hashcode;
  }

  public override string ToString()
  {
    var sb = new StringBuilder("TSInsertRecordsReq(");
    sb.Append(", SessionId: ");
    SessionId.ToString(sb);
    if((DeviceIds != null))
    {
      sb.Append(", DeviceIds: ");
      DeviceIds.ToString(sb);
    }
    if((MeasurementsList != null))
    {
      sb.Append(", MeasurementsList: ");
      MeasurementsList.ToString(sb);
    }
    if((ValuesList != null))
    {
      sb.Append(", ValuesList: ");
      ValuesList.ToString(sb);
    }
    if((Timestamps != null))
    {
      sb.Append(", Timestamps: ");
      Timestamps.ToString(sb);
    }
    sb.Append(')');
    return sb.ToString();
  }
}

